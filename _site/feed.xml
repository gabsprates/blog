<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabriel Prates</title>
    <description>Desenvolvedor há mais de 5 anos e baterista nas horas vagas. #web #html #css #js #freesoftware #opensource #busquemconhecimento
</description>
    <link>http://gabrielprates.com/</link>
    <atom:link href="http://gabrielprates.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Jul 2017 14:24:28 -0300</pubDate>
    <lastBuildDate>Sat, 01 Jul 2017 14:24:28 -0300</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Exceções e Erros em JavaScript</title>
        <description>&lt;p&gt;Com o objetivo de tratar exceções e controlar erros, em tempo de execução, algumas linguagens implementam alguns mecanismos interessantes, como por exemplo &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;, que você pode trabalhar com funções de retornos múltiplos para passar erro e dados em caso de sucesso; e &lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;Bash&lt;/a&gt; que se trata erros quando o &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; do programa é maior que zero &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, já que zero significa sucesso, sem falar no “&lt;em&gt;exception&lt;/em&gt;” de comandos encadeados com &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;. Agora vamos falar sobre como JavaScript faz isso.&lt;/p&gt;

&lt;p&gt;Bom, pra começar, as exceções são utilizadas como uma forma de &lt;em&gt;feedback&lt;/em&gt;, para cógido saber o que fazer quando cair numa situação de erro. Agora você precisa entender que os &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;&lt;em&gt;statements&lt;/em&gt;&lt;/a&gt; (declarações, ou “comandos”) e os objetos citados aqui são coisas &lt;strong&gt;separadas&lt;/strong&gt;, apesar de &lt;strong&gt;funcionar em conjunto&lt;/strong&gt;. Mais precisamente, vamos falar sobre 3 coisas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Objetos do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;o &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;e o bloco &lt;code class=&quot;highlighter-rouge&quot;&gt;try...catch&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;So, let’s go there!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;objetos-do-tipo-error&quot;&gt;Objetos do tipo &lt;em&gt;Error&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Sabe quando o console te mostra algum erro de sintaxe, ou um erro de referência, falando que uma variável ou função não existe? Aquelas mensagens esquisitas são dos objetos de &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;. Basicamente, esses objetos tem seu prototype composto pelos seguintes itens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.constructor&lt;/code&gt;: que inicializa os objetos, é chamado quando se instancia com o &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, ou apenas chamando como função &lt;code class=&quot;highlighter-rouge&quot;&gt;Error()&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.message&lt;/code&gt;: a mensagem de erro, que é passada como primeiro argumento do construtor;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.name&lt;/code&gt;: o tipo do erro. Ex.: “&lt;em&gt;Error&lt;/em&gt;”, “&lt;em&gt;ReferenceError&lt;/em&gt;”;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.toString()&lt;/code&gt;: herdado do &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype.toString()&lt;/code&gt; e retorna o valor de &lt;code class=&quot;highlighter-rouge&quot;&gt;.message&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, como eu disse, a propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;.name&lt;/code&gt; especifica o tipo do Erro. Vamos dar uma olhada nos erros &lt;strong&gt;nativos&lt;/strong&gt; e quando aparecem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;EvalError&lt;/em&gt;&lt;/strong&gt;: lançado quando a função &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; lança algum erro;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;RangeError&lt;/em&gt;&lt;/strong&gt;: lançado quando encontra algum valor não está dentro do intervalo permitido;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;ReferenceError&lt;/em&gt;&lt;/strong&gt;: lançado quando uma referência inválida é detectada;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;SyntaxError&lt;/em&gt;&lt;/strong&gt;: lançado quando existe algum erro no &lt;em&gt;parse&lt;/em&gt;, no momento que a &lt;em&gt;engine&lt;/em&gt; lê o código para interpretá-lo;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;TypeError&lt;/em&gt;&lt;/strong&gt;: lançado quando um parâmetro de uma função não é do tipo desejado;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;URIError&lt;/em&gt;&lt;/strong&gt;: lançado quando alguma operação de URI, &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURI()&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;decodeURI()&lt;/code&gt;, recebem parâmetros inválidos.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bom, este são os erros nativos. Já que são extensões do objeto &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;, nós também podemos criar nossos erros, para poder tratá-los da melhor forma possível. Exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Erro para regras de negócio&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BusinessError&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// e podemos adicionar algum método específico&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ok, &lt;em&gt;next&lt;/em&gt;!&lt;/p&gt;

&lt;h2 id=&quot;o-lançamento-throw&quot;&gt;O “lançamento”: &lt;em&gt;throw&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Okay. Reparou que falei dos erros serem lançados? É exatamente isso que acontece.&lt;/p&gt;

&lt;p&gt;Durante a execução do programa, se houver algum tipo de inconsistência, dos tipos nativos de erro, ou se houver alguma situação que devemos avisar sobre erros, utiliza-se o &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; para lançar “coisas” para que “alguém” faça algo com essa coisa.&lt;/p&gt;

&lt;p&gt;Eu disse lançar “coisas” porque você pode lançar qualquer coisa, dentre elas, objetos de erro. Por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// lançar um erro de negócio, com nossa classe `BusinessError`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BusinessError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CPF inválido'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// lançar uma string de erro&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Erro: foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// lançar o status de erro HTTP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// lançar objetos literais&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Erro: bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// lançar funções&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ¯\_(ツ)_/¯ */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Não digo que lançar coisas que não sejam objetos de erro seja algo comum, nem que é uma boa prática, mas existe a possibilidade de fazer isso e é bom saber.&lt;/p&gt;

&lt;p&gt;Beleza, deu pra entender a função do &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt;? Em poucas palavras, ele lança (ou “joga”) o erro para a estrutura de controle, e é dela que vamos falar agora.&lt;/p&gt;

&lt;h2 id=&quot;o-bloco-trycatch&quot;&gt;O bloco &lt;em&gt;try..catch&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Enquanto se &lt;em&gt;tenta&lt;/em&gt; executar determinado trecho de código, pode ser que tenhamos erros que quebram o fluxo e todo o programa, não é mesmo? Para resolver esse problema, podemos tratar alguns erros no caso de &lt;strong&gt;&lt;em&gt;falha&lt;/em&gt;&lt;/strong&gt; durante a &lt;strong&gt;&lt;em&gt;tentativa&lt;/em&gt;&lt;/strong&gt;. Por isso, utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A responsabilidade desta estrutura é &lt;strong&gt;tentar executar algo&lt;/strong&gt; e, caso dê algum problema durante a execução, &lt;strong&gt;pegar os erros&lt;/strong&gt; e tratá-los da forma mais adequada possível.&lt;/p&gt;

&lt;p&gt;Então:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; é quem pega as coisas lançadas pelo &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; dentro do bloco &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para entender melhor:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// &quot;Tentamos&quot; executar algo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Caso haja algum erro que precise de tratamento (ex.: de negócio)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usuario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permissao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// &quot;Lançamos&quot; um objeto de erro para o `catch`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BusinessError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Acesso não autorizado&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// O `catch` &quot;pega&quot; qualquer coisa lançada no `try`, através do `throw`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// e fazemos o que precisar com isso&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lembre o seguinte: qualquer erro nativo também é lançado e cairá no &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;finally&quot;&gt;&lt;em&gt;finally&lt;/em&gt;!!!&lt;/h3&gt;

&lt;p&gt;O bloco &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch&lt;/code&gt; também permite a execução de coisas no fim da execução do bloco, tendo sucesso ou caindo no &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;. Para isso, utilizamos o bloco &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt;. Exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// throw:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ┻━┻ ヘ╰( •̀ε•́ ╰)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ╰( ⁰ ਊ ⁰ )━☆ﾟ.*･｡ﾟ&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Sempre executa ao finalizar o `try` ou o `catch`&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// É um bom lugar pra executar coisas como:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  * fechar uma transação com o DB;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  * fechar arquivos que foram abertos para leitura;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  * atualizar o estado da view;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;observação&quot;&gt;Observação&lt;/h3&gt;

&lt;p&gt;Este mecanismo de tratamento de erros em tempo de execução (com &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch..finally&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt;) também é adotado por outras linguagens. Podemos citar PHP e Java como exemplo e cada uma delas tem seus objetos de erro específicos. JavaScript utiliza os objetos do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;, PHP e Java tem seus objetos de &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;, que servem pra mesma coisa.&lt;/p&gt;

&lt;h2 id=&quot;por-fim&quot;&gt;Por fim&lt;/h2&gt;

&lt;p&gt;Bom, resolvi escrever este post porque eu achei sempre achava um post falando sobre o &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch&lt;/code&gt;, outro falando sobre o &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt;, mas não tinha visto algum que explicava a coisa como um todo.&lt;/p&gt;

&lt;p&gt;Então, fui claro? Deu pra entender a interação desses elementos?&lt;/p&gt;

&lt;p&gt;Se tive alguma dúvida, ou se algo não ficou claro, ou se algo do que falei está errado, deixe um comentário ou me chame no twitter, será um prazer.&lt;/p&gt;

&lt;p&gt;Até a próxima&lt;/p&gt;

&lt;p&gt;(:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Error Objects - &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-error-objects&quot;&gt;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-error-objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ECMAScript Language: Statements and Declarations - &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-ecmascript-language-statements-and-declarations&quot;&gt;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-ecmascript-language-statements-and-declarations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Error - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;throw - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;try…catch - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try…catch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;try…catch…finally Statement (JavaScript) - &lt;a href=&quot;https://docs.microsoft.com/en-us/scripting/javascript/reference/try-dot-dot-dot-catch-dot-dot-dot-finally-statement-javascript&quot;&gt;https://docs.microsoft.com/en-us/scripting/javascript/reference/try-dot-dot-dot-catch-dot-dot-dot-finally-statement-javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;throw Statement (JavaScript) - &lt;a href=&quot;https://docs.microsoft.com/en-us/scripting/javascript/reference/throw-statement-javascript&quot;&gt;https://docs.microsoft.com/en-us/scripting/javascript/reference/throw-statement-javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Error Object (JavaScript) - &lt;a href=&quot;https://docs.microsoft.com/en-us/scripting/javascript/reference/error-object-javascript&quot;&gt;https://docs.microsoft.com/en-us/scripting/javascript/reference/error-object-javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Jul 2017 14:24:26 -0300</pubDate>
        <link>http://gabrielprates.com/2017/07/01/excecoes-e-erros-em-js.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2017/07/01/excecoes-e-erros-em-js.html</guid>
        
        
      </item>
    
      <item>
        <title>Prioridades e Conforto</title>
        <description>&lt;p&gt;Depois de quase 6 anos no mercado de tecnologia e 4 anos na faculdade, pude perceber que tudo é uma questão de prioridade e, quando não se tem isso, é fácil de perder tempo na vida. Gostaria de sair um pouco do contexto mais técnico que eu geralmente posto e compartilhar um pouco dessas reflexões.&lt;/p&gt;

&lt;p&gt;Nem sempre fui dedicado e estudioso. Na verdade, eu passei muito tempo acomodado com o que fazia:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O HTML/CSS que precisava pra deixar a página bonitinha, sem muito efeito ou firula (pra não dar trabalho), e se precisasse, usava um jQuery &lt;code class=&quot;highlighter-rouge&quot;&gt;.animate(...)&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Fazer os trabalhos da faculdade pra ganhar uns pontos e garantir a média, o que conseguisse à mais seria lucro;&lt;/li&gt;
  &lt;li&gt;Escutar as músicas pra tocar, mas “pra que ficar estudando tempo e compasso?”;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E por aí vai. Naquele tempo eu não cresci quase nada em termos de conhecimento. Acho que deu pra perceber que eu não conseguia fazer nada disso bem feito, né? A questão não era que eu não queria fazer as coisas da maneira correta, eu queria! Só que eu não dava importância pras coisas que eu não achava úteis e isso afetava o todo. Talvez eu não gostasse de ter que me esforçar, e esse &lt;strong&gt;é o maior perigo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo, você acha uma boa gastar tempo lendo documentações? Você acha que a disciplina Filosofia é importante a para um curso de TI, ou computação? E Português? E Direito?! Se você respondeu não para alguma delas, por favor, reconsidere. Eu sei que às vezes é difícil animar com algo que não pareça tão atrativo, ou que pareça não encaixar com o nosso contexto de gosto. Mas veja como os exemplos deste parágrafo são importantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nossa comunicação é muito escrita (e-mail, Slack, Twitter);&lt;/li&gt;
  &lt;li&gt;Nossas leis são baseadas em coisas escritas por Platão e Aristóteles;&lt;/li&gt;
  &lt;li&gt;Entender a necessidade de outras áreas nos faz perceber oportunidades;&lt;/li&gt;
  &lt;li&gt;Para trabalhar em equipe você precisa saber referenciar conteúdos;&lt;/li&gt;
  &lt;li&gt;Documentações te ensinam a tecnologia com detalhes, uma seção geralmente tem vários links para outras partes que complementam o conhecimento.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essas são apenas algumas coisas. Acho que aqui dá até pra falar sobre um assunto polêmico… Aposto que você já ouviu algo parecido com:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Não preciso fazer faculdade para atuar no mercado de tecnologia, então preciso menos ainda estudar algo que não gosto!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É VERDADE, em partes! Eu também acho que não é necessário ter um diploma de curso superior para trabalhar com tecnologia. No entanto, em vários momentos da vida profissional você terá que fazer algo que não gosta e, acredite, pode ser uma ótima oportunidade de aprendizado. O que a faculdade me ensinou, e me ensina, é correr atrás das coisas, ou como é bonitinho de falar “sair da zona de conforto”. Sei que não faria isso sozinho. Aprendi a pesquisar e produzir conhecimento, vi a relação direta da matemática com a computação, também aprendi lidar melhor com trabalho em equipe e descobri a Engenharia de Software, que me fez acordar para o caminho das boas práticas. Por isso eu acho que é bom avaliar antes de falar que “faculdade não serve pra nada”.&lt;/p&gt;

&lt;p&gt;Lembro quando comecei a me incomodar em sempre &lt;em&gt;catar pedaços&lt;/em&gt; de CSS de projetos anteriores, e vi falar sobre frameworks. Daí eu conheci o Bootstrap e também sobre layout responsivo. O Bootstrap era escrito em LESS, mas também tinha opção em SASS (aí já foram duas novas tecnologias). Por causa do SASS, instalei o Ruby e acabei conhecendo o Jekyll. Sem falar nas APIs novas &lt;del&gt;(na época eram novas rsrs)&lt;/del&gt; do HTML5 e animações com CSS3, nem precisava de JavaScript!!! Lembro de ter pensado “&lt;em&gt;então por quê as pessoas usam JS pra animações, isso é pra validar formulários e fazer requisições AJAX?&lt;/em&gt;” e depois “&lt;em&gt;Canvas?!?!&lt;/em&gt;”, daí percebi que &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS&quot;&gt;eu não sabia JS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Realmente não é fácil começar estudar algo novo, principalmente se não há muito interesse naquilo. Mas descobri que tudo é uma questão de prioridade, foco e propósito.&lt;/p&gt;

&lt;p&gt;Quando você estabelece um propósito e mantém o foco nele, você enfrenta qualquer desafio para alcançá-lo. Se for para uma formação superior, você estuda as disciplinas que não são da área e aprende muito com elas. Se for para trabalhar com determinada tecnologia, você aprende ler a documentação dela e acha praticamente todas as respostas que procura. Se for de carreira, você enfrenta alguns momentos turbulentos e complicados para alcançar o sonho.&lt;/p&gt;

&lt;p&gt;Talvez esse post seja mais motivacional (igual alguns dos episódios do &lt;a href=&quot;http://devnaestrada.com.br/&quot;&gt;DevNaEstrada&lt;/a&gt;), ou de desabafo. Mas isso realmente é verdade. Então se você parar pra pensar um dia e falar &lt;em&gt;“Eu tenho um sonho…“&lt;/em&gt;, corra atrás. Se planeje, e vai. A mensagem que eu gostaria que ficasse com esse post é:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tenha-sonhos-estabeleça-suas-metas-foque-nos-seus-propósitos-e-saia-da-sua-zona-de-conforto&quot;&gt;Tenha sonhos, estabeleça suas metas, foque nos seus propósitos e saia da sua zona de conforto!&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bom… isso é tudo pessoal.&lt;/p&gt;

&lt;p&gt;Até a próxima.
(:&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Apr 2017 00:00:00 -0300</pubDate>
        <link>http://gabrielprates.com/2017/04/21/prioridades-e-conforto.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2017/04/21/prioridades-e-conforto.html</guid>
        
        
      </item>
    
      <item>
        <title>Atribuição múltipla com Destruturing Assignment</title>
        <description>&lt;p&gt;Uma coisa que me chamou muita a atenção na linguagem &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; foi a possibilidade de retornos múltiplos e, até mesmo, de tipos diferentes. Recentemente, vi que agora, na era pós ES6, podemos fazer algo parecido com &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Vamos supor que precisamos tratar um nome, e exibi-lo como referência do determinado autor. Poderíamos fazer assim:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ucFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomeAutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ultimoNome&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outrosNomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ucFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ultimoNome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outrosNomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;nomeAutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gabriel oliveira prates'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// PRATES, Gabriel Oliveira&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mas e se precisarmos de ambos os nomes separados? Poderíamos criar uma função para cada uma das ações, uma para pegar o &lt;code class=&quot;highlighter-rouge&quot;&gt;ultimoNome&lt;/code&gt;, outra para pegar os &lt;code class=&quot;highlighter-rouge&quot;&gt;outrosNomes&lt;/code&gt;· Isso resolve, certo? Veja só:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ucFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;separaNome&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ultimoNome&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;separaNome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outrosNomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;separaNome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ucFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gabriel oliveira prates'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Observe esta atribuição&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ultimo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ultimoNome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PRATES&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outros&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outrosNomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Gabriel Oliveira&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Apesar de modularizado e com funções que cumprem apenas uma tarefa, precisamos atribuir cada uma das variáveis ao seu respectivo valor de uma forma não tão interessante. Podemos ter um código final melhor, de leitura e entendimento, e menor. E é aqui que entramos no ponto chave deste artigo.&lt;/p&gt;

&lt;h2 id=&quot;o-que-é-destructuring-assignment&quot;&gt;O que é “Destructuring Assignment”&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destructuring Assignment&lt;/em&gt;&lt;/strong&gt; (ou &lt;em&gt;atribuição por desestruturação&lt;/em&gt;) é uma sintaxe de expressão que permite extrair valores de &lt;strong&gt;arrays&lt;/strong&gt; e &lt;strong&gt;objetos&lt;/strong&gt;, usando o lado esquerdo da atribuição (&lt;em&gt;left-hand side of assignment&lt;/em&gt;) para definir quais valores serão extraídos. Exemplos básicos:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Array:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ES6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2015&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Objetos:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ES6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2015&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mas é claro que isso não é tudo. Então vamos lá, vamos ver alguns detalhes de cada um dos casos.&lt;/p&gt;

&lt;h3 id=&quot;array&quot;&gt;Array&lt;/h3&gt;

&lt;p&gt;Para fazer as atribuições com um array, devemos considerar a extração de valores através das posições do array. Vamos olhar de novo o exemplo do array:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Aqui já criamos as variáveis e atribuímos valores:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// Mas poderíamos fazer o processo separado também:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;É um pouco óbvio, mas no próximo tópico você vai entender o porquê de eu ressaltar isso.&lt;/p&gt;

&lt;p&gt;Vamos supor que temos uma função que nos retorna um array com os valores da cotação do dólar nos últimos 30 dias. Vamos supor também, que precisamos dos 5 primeiros valores. Podemos usar o &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.slice()&lt;/code&gt;, mas isso nos retornaria um novo array. Então se precisarmos das variáveis separadas, seria necessário atribuir uma a uma para as 5 primeiras posições do array.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cotacaoUltimoMes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Antigamente&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Como podemos fazer agora:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cotacaoUltimoMes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A atribuição fica muito mais enxuta, consegue perceber? Percebeu que os outros 25 elementos não fazem diferença para a atribuição? Caso esses elementos sejam necessários, e for permitido colocá-los num array mesmo, podemos utilizar o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;operador rest &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outros&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cotacaoUltimoMes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `outros` será o array com o resto dos valores.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E se precisarmos, por exemplos, dos 7 primeiros elementos, com exceção do 4º e 6º elementos, isso quebraria a lógica, certo? &lt;strong&gt;ERRADO!!!&lt;/strong&gt; É ainda mais simples. Para cada posição que for necessária saltar, só precisamos especificá-la com os espaços em branco separados por vírgula ( &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; ). Veja:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Espaços em branco que representam o 4º e 6º elementos&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cotacaoUltimoMes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Em algum outro caso, se tivermos um array de retorno, com o tamanho instável e for necessário garantir determinada quantidade de valores, podemos deixar valores pré-definidos na atribuição:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// v3 e v4 pré-definidos&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retornaArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tudo certo? Ok, então vamos passar para o próximo caso.&lt;/p&gt;

&lt;h3 id=&quot;objetos&quot;&gt;Objetos&lt;/h3&gt;

&lt;p&gt;Para fazer as atribuições com um objeto, devemos associar as chaves, ou nomes dos atributos (propriedades) do objeto. Observe novamente o exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Atribuição direta associando as chaves&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Podemos também fazer a atribuição indireta, como no exemplo do array, mas aqui há uma particularidade (a que eu falei &lt;em&gt;“você vai entender o porquê de eu ressaltar isso”&lt;/em&gt;). Se você tentar executar o código abaixo, terá um erro de sintaxe:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Isso porque &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; é considerado um bloco, então realmente há um erro de sintaxe aí. Para consertar isso, devemos colocar essa operação de atribuição dentro de uma expressão, entre parênteses:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Assim como na operação para array, podemos ter valores pré-definidos também:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'JavaScript'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'ES6'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2017&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E outra coisa legal também, é que podemos jogar os valores para uma variável com um novo nome:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ano&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ES6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'ES6'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 2015&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Nesse caso, `a` e `b` não fazem parte deste escopo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Voltando ao primeiro exemplo deste artigo, aquele do nome do autor, podemos reescrevê-lo assim:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ucFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Vamos modificar a função do primeiro snnipet&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// para retornar múltiplos resultados&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomeAutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ultimoNome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;outrosNomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ucFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ultimoNome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outrosNomes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nomeAutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gabriel oliveira prates'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto! Já temos os dois valores que queríamos e podemos trabalhar com eles da forma que for necessária.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Essas novas características de &lt;em&gt;destructuring assignment&lt;/em&gt; funcionam mais como um &lt;em&gt;syntax sugar&lt;/em&gt;, mas realmente chegam a ser úteis. O mais legal é que você pode usá-las em conjunto, daí adotar a solução que seu problema pedir.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado. Caso não tenha entendido alguma parte deste artigo, e dos códigos, comente abaixo, ou me mande um tweet. É sempre um prazer.&lt;/p&gt;

&lt;p&gt;Até a próxima&lt;/p&gt;

&lt;p&gt;(:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-destructuring-assignment&quot;&gt;http://www.ecma-international.org/ecma-262/6.0/#sec-destructuring-assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://gabrielprates.com/2017/03/04/atribuicao-multipla-com-destruturing-assignment.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2017/03/04/atribuicao-multipla-com-destruturing-assignment.html</guid>
        
        
      </item>
    
      <item>
        <title>O dia que eu aprendi React</title>
        <description>&lt;p&gt;Apesar de ter ouvido falar tanto de &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; (&lt;a href=&quot;http://zofe.com.br/posts/react-componentes-e-a-web/&quot;&gt;no ZOFE&lt;/a&gt;, &lt;a href=&quot;http://devnaestrada.com.br/2016/09/23/angular-vs-react.html&quot;&gt;no DNE&lt;/a&gt;, num evento da Locaweb, no FrontInBH2016 e no resto da vida), eu, de fato, não havia parado pra ver como era essa &lt;em&gt;lib&lt;/em&gt;. Até que um dia, um professor passou um trabalho que seria basicamente um &lt;em&gt;game show&lt;/em&gt; de perguntas sobre a matéria. Na hora, tive a ideia do que fazer.&lt;/p&gt;

&lt;p&gt;Na verdade, só tive a ideia, mas fiquei sem saber o que utilizar. Comecei com Bootstrap e jQuery, porque pensei &lt;em&gt;“não vou arriscar e fazer algo rápido logo.”&lt;/em&gt;, mas aí eu pensei &lt;em&gt;“olha, na verdade é uma boa oportunidade para testar algo novo…“&lt;/em&gt;, e instalei o &lt;a href=&quot;https://www.angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. Nos mesmos dias que comecei, eu estava lendo o post do Diego Eis no Medium do Tableless sobre &lt;a href=&quot;https://medium.com/tableless/hello-world-com-react-desde-o-rascunho-7629bd801d3e#.s6ibs85pt&quot;&gt;‘hello world com React’&lt;/a&gt;, e adivinha? Resolvi testar o React. Tá bom, agora é sério, parei aqui.&lt;/p&gt;

&lt;p&gt;No post, Diego Eis fala sobre umas vídeo-aulas que ele viu, do Matheus Lima, no &lt;a href=&quot;http://jscasts.teachable.com/p/comecando-com-react-js&quot;&gt;jscasts&lt;/a&gt; e aí eu resolvi dar uma olhada e seguir nesse projetinho me baseando nesse curso. Daí surgiu a &lt;a href=&quot;https://github.com/gabsprates/english-quiz/releases/tag/v1.0&quot;&gt;v1.0 do English Quiz&lt;/a&gt;, que no fim das contas funcionou bem e meu trabalho foi um sucesso &lt;del&gt;apesar de eu não ter aplicado as melhores práticas no desenvolvimento&lt;/del&gt;. Confesso que pude perceber muito mais, ou talvez, realmente entendi &lt;em&gt;closures&lt;/em&gt; fazendo esse trabalho.&lt;/p&gt;

&lt;p&gt;Apesar do título desse post, eu não aprendi React em um dia. Na verdade, ainda não parei de aprender. Já li boa parte da documentação e implementei várias coisinhas de testes, mas cada vez que converso sobre, eu tenho uns momentos &lt;em&gt;mind blown&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Exatamente por isso, estou reescrevendo esse projeto. Para isso, gastei uns dias das férias estudando, testando e tendo ótimos momentos de descoberta. Acho que alguns pontos são válidos de colocar aqui separadamente, então vamos lá.&lt;/p&gt;

&lt;h2 id=&quot;es6-es2015-or-whatever&quot;&gt;ES6, ES2015 or &lt;em&gt;whatever&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;O primeiro deles, e na verdade o mais importante: &lt;strong&gt;JavaScript e as novas &lt;em&gt;features&lt;/em&gt; do ES6!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pode parecer clichê dizer isso, mas na verdade é a parte mais importante de todo o resto. Participar da tradução do &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS&quot;&gt;You Don’t Know JS&lt;/a&gt; tem me ajudado bastante, daí a base em JS eu até que já tinha, mas como falei, comecei pelas vídeo-aulas do Matheus Lima, e aquele curso era com &lt;strong&gt;ES5&lt;/strong&gt;. Daí a aplicação, apesar de funcionando, ficou com uma carinha de “esse código poderia ser mais bonito e mais legível”, daí parei pra olhar a documentação do React com mais carinho e mais tempo, vi os exemplos em &lt;strong&gt;ES6&lt;/strong&gt; e fui logo procurar saber sobre as coisas que eu ainda entendia muito, como por exemplo: sistema de módulos e o &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; syntax sugar. Depois posso até fazer um post falando mais sobre o sistema de módulos, achei interessante, apesar de (até onde eu saiba) não ter nenhum navegador que implementou suporte (até a presente data).&lt;/p&gt;

&lt;p&gt;Então, se você ainda não começou a usar, dá uma olhada na página do &lt;a href=&quot;http://babeljs.io/learn-es2015/&quot;&gt;Learn ES2015&lt;/a&gt;, do site do Babel. ES6 é um ótimo amigo e já está ficando velho.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:p&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;webpack&quot;&gt;webpack&lt;/h2&gt;

&lt;p&gt;Já tentou usar o &lt;a href=&quot;http://webpack.github.io/docs/webpack-dev-server.html&quot;&gt;webpack-dev-server&lt;/a&gt; mas percebeu que ele não gerava um bundle no diretório de &lt;strong&gt;&lt;em&gt;output&lt;/em&gt;&lt;/strong&gt;? Eu percebi, achei que não prestava e achei que não tinha configurado direito, daí deixei pra lá… Até &lt;a href=&quot;&quot;&gt;O dia que eu aprendi React&lt;/a&gt; (#recursividade).&lt;/p&gt;

&lt;p&gt;Sim, comunidades podem ajudar muito e exatamente por isso, leia as documentações e ajude. Aprendi a mexer com o &lt;a href=&quot;http://webpack.github.io/&quot;&gt;webpack&lt;/a&gt; assim, e entendi que o &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt; gera o bundle em memória, enquanto roda o servidor. Valeu o estudo porque agora posso usá-lo pra qualquer outra coisa, graças aos vários loaders e plugins! Vivendo e aprendendo. Esses links do webpack vão te levar para a documentação da versão 1, que foi a que eu usei, mas como recentemente foi lançada a versão 2, aconselho você olhar a &lt;a href=&quot;https://webpack.js.org/&quot;&gt;nova documentação&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;react-em-si&quot;&gt;React em si&lt;/h2&gt;

&lt;p&gt;Mais uma vez: leia documentações.&lt;/p&gt;

&lt;p&gt;A do React é muito boa e dá ótimos exemplos e explicações. Se você tiver um tempinho pra dedicar a isso, será muito produtivo. Vídeo-aulas são bacanas, principalmente quando você está um pouco cansado para ler, mas a documentação é onde você acha os verdadeiros porquês por trás das coisas.&lt;/p&gt;

&lt;p&gt;Entender como e quando usar &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; é fundamental. Entender os métodos &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount()&lt;/code&gt; também são muito importantes para o &lt;a href=&quot;https://facebook.github.io/react/docs/state-and-lifecycle.html&quot;&gt;ciclo de vida&lt;/a&gt; do componente. E a melhor parte (pra mim) &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot;&gt;pensar React&lt;/a&gt; e &lt;a href=&quot;https://facebook.github.io/react/docs/composition-vs-inheritance.html&quot;&gt;pensar em composição&lt;/a&gt; ajuda muito.&lt;/p&gt;

&lt;p&gt;Estou refatorando a aplicação e (no presente momento) estou no &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state&quot;&gt;passo 3&lt;/a&gt; do processo de pensar em React. Quando estiver OK eu aviso, ok?&lt;/p&gt;

&lt;h2 id=&quot;outras-coisinhas&quot;&gt;Outras coisinhas&lt;/h2&gt;

&lt;p&gt;Por um motivo bobo, resolvi colocar o &lt;code class=&quot;highlighter-rouge&quot;&gt;border-radius&lt;/code&gt; dos botões que estava criando com um número absurdo: &lt;code class=&quot;highlighter-rouge&quot;&gt;19941101px&lt;/code&gt;. O resultado foi que descobri um break point na versão 50 do Firefox. O &lt;code class=&quot;highlighter-rouge&quot;&gt;border-radius&lt;/code&gt; quebra em &lt;code class=&quot;highlighter-rouge&quot;&gt;17895698px&lt;/code&gt;. Agora, por qual motivo alguém faria isso?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E o que mais? NodeJS e Express.js! Mas isso fica pra outro post. Sendo breve, aproveitei pra escrever uma API simples, com MVC, um CRUD básico e MongoDB pra armazenar as perguntas do quiz. Tá funcionando &lt;del&gt;hehe&lt;/del&gt;, mas já sei o que dá pra melhorar. Tá na lista.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;As férias da faculdade foram bem corridas, apertadas de serviço, e ótimas pra estudar outras coisas que não se vê na sala de aula. Estou feliz com esse progresso, fui até desafiado estudar Ionic2 e Angular2, mas deixa pra algum feriado prolongado aí.&lt;/p&gt;

&lt;p&gt;Alguma dúvida? Algum comentário? Deixa aí embaixo, será um prazer trocar uma ideia.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal, até a próxima.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(:&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 00:00:00 -0200</pubDate>
        <link>http://gabrielprates.com/2017/02/03/o-dia-eu-que-aprendi-react.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2017/02/03/o-dia-eu-que-aprendi-react.html</guid>
        
        
      </item>
    
      <item>
        <title>Shell Script -n1 --intro</title>
        <description>&lt;p&gt;Resolver as coisas pelo terminal ou não precisar muito do mouse sempre foi uma coisa que me chamou a atenção. Depois de passar alguns dias estudando (e colocando em prática) um pouco de shell script, consegui experimentar um pouco mais disso. Pude experimentar recursos e aprender mais como as coisas funcionam. Tem sido um ótimo período!&lt;/p&gt;

&lt;p&gt;Pretendo escrever uma série de artigos sobre shell script, já que é uma coisa que se tornou parte do meu dia-a-dia, e assim compartilhar dessa experiência. Esse talvez será o mais conceitual, já que devemos nos acostumar com uma série de conceitos e termos.&lt;/p&gt;

&lt;h2 id=&quot;primeiros-passos&quot;&gt;Primeiros passos&lt;/h2&gt;

&lt;p&gt;Antes de prosseguirmos, precisamos responder algumas questões, e a primeira delas é:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O que é &lt;strong&gt;shell&lt;/strong&gt;???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podemos definir &lt;strong&gt;shell&lt;/strong&gt; como uma interface de usuário, seja ela uma &lt;em&gt;Command-Line Interface&lt;/em&gt; (CLI), ou uma &lt;em&gt;Graphical User Interface&lt;/em&gt; (GUI). Shells são interativos, ou seja, aceitam comandos, sejam eles via mouse ou teclado. Alguma dúvida aqui?&lt;/p&gt;

&lt;p&gt;Segunda pergunta:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Se &lt;strong&gt;shell&lt;/strong&gt; é uma interface de usuário, o que é &lt;strong&gt;Shell Script&lt;/strong&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok. Interfaces de usuário aceitam comandos, certo? Sejam GUIs ou CLIs (onde é mais explícito), elas aceitam comandos. Falando em CLIs, escrevemos os comandos. Esse conjunto de comandos que escrevemos para interagir com o shell em questão, quando escritos em blocos, podem ser considerados shell script.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O que é POSIX?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;POSIX&lt;/em&gt; (&lt;strong&gt;P&lt;/strong&gt;ortable &lt;strong&gt;O&lt;/strong&gt;perating &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;I&lt;/strong&gt;nterface) é uma família de padrões de sistemas abertos baseados em Unix, definidos pela &lt;a href=&quot;http://www.ieee.org/index.html&quot;&gt;IEEE&lt;/a&gt;, também conhecido como &lt;strong&gt;IEEE 1003&lt;/strong&gt;. Ah, o &lt;strong&gt;X&lt;/strong&gt; de POSIX, vem do Uni&lt;strong&gt;x&lt;/strong&gt; e esse termo foi proposto por &lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Stallman&quot;&gt;Richard Stallman&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Tá&lt;/em&gt;, mas qual é a relação de shell script e POSIX?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scripts shell são construídos de palavras-chave, comandos padrão, comandos do SO, funções e estruturas de controle. Parece uma linguagem de programação qualquer, certo? Esse é o padrão, é o conjunto de normas propostos pelo POSIX.&lt;/p&gt;

&lt;p&gt;Existem várias implementações de interpretadores baseados no POSIX: &lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;Bash&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_shell&quot;&gt;CSH&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/KornShell&quot;&gt;KSH&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tcsh&quot;&gt;TCSH&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt; e outros. O Bash é o mais comum deles, muito usado nos descendentes da família Unix (aqui estou contando com o GNU/Linux e os sistemas MacOS). Por ser mais comum, e o que eu uso, vou adotar Bash para os exemplos desses artigos.&lt;/p&gt;

&lt;h2 id=&quot;filosofia-unix&quot;&gt;Filosofia Unix&lt;/h2&gt;

&lt;p&gt;Já ouviu falar sobre a Filosofia Unix? Ela propõe algumas ideias interessantes para o desenvolvimento de software, como por exemplo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Programas devem fazer uma coisa, e fazer aquilo bem feito.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programas devem trabalhar juntos para atingir objetivos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Keep it Simple, Stupid&lt;/em&gt; (Mantenha isso simples, estúpido).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esses pontos foram disseminados em praticamente todas as comunidades de desenvolvimento de software, porque realmente são boas práticas. Em Shell Script não é diferente, talvez é até mais perceptível. Futuramente vamos falar de redirecionamento de entradas e saídas, e algumas outras coisas que deixarão isso mais claro.&lt;/p&gt;

&lt;h2 id=&quot;nosso-hello-world&quot;&gt;Nosso “Hello World”!&lt;/h2&gt;

&lt;p&gt;Vamos escrever um pequeno programinha em Bash, para eu poder explicar algumas coisas durante o caminho.&lt;/p&gt;

&lt;h3 id=&quot;tipos-de-comandos&quot;&gt;Tipos de Comandos&lt;/h3&gt;

&lt;p&gt;Vamos lá. Podemos dizer que temos alguns tipos de comandos, são eles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alias&lt;/strong&gt;: São atalhos definidos para algum outro programa. Ex.: &lt;strong&gt;ll&lt;/strong&gt; é um alias para &lt;strong&gt;ls -lh&lt;/strong&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Palavras-chave&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;, etc.;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Funções&lt;/strong&gt;: Funções definidas pelo usuários;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Built in&lt;/em&gt;&lt;/strong&gt; (Embutidos): Funções que fazem parte do próprio shell;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Programas&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O último item, os &lt;strong&gt;Programas&lt;/strong&gt; são localizados pelo sistema através da variável &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;. Se você mexe com NPM, provavelmente já se deparou com essa variável de ambiente. Vamos dar uma olhada nela, abra seu terminal (ou seu Prompt Shell, para falar bonito), digite &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt; e observe o retorno. No meu caso:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
/usr/local/bin:/usr/local/sbin:/usr/bin:/home/gabriel/.npm-global/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Separados por &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; (dois pontos), esses são os caminhos que contém os programas rastreados pelo sistema, aqueles que você começa digitar e aperta &lt;code class=&quot;highlighter-rouge&quot;&gt;TAB&lt;/code&gt; para autocompletar. Então, esses são os comandos que estão disponibilizados para trabalharmos.&lt;/p&gt;

&lt;p&gt;Ah, você pode usar o &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; para saber informações sobre o tipo do comando. Ex.: &lt;code class=&quot;highlighter-rouge&quot;&gt;type echo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Vamos usar alguns desses comandos para exibir todos os programas rastreados pelo sistema. Crie o arquivo &lt;code class=&quot;highlighter-rouge&quot;&gt;listar-programas.sh&lt;/code&gt; e dê permissão para que seu usuário execute esse programa com o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod u+x listar-programas.sh&lt;/code&gt;, vamos trabalhar nele.&lt;/p&gt;

&lt;p&gt;Por enquanto, salve o arquivo com o comando que executamos antes, mas assim:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A primeira linha desse código é o nosso &lt;strong&gt;&lt;em&gt;Shebang&lt;/em&gt;&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt;). Em sistemas &lt;em&gt;Unix-like&lt;/em&gt;, ele é usado para indicar um executor para o determinado script. Talvez você já tenha visto algo parecido em algum projeto em Node.js (&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/usr/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;/code&gt;), ou Python (&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Ok, você deu a permissão de execução que falei? Então vá no seu prompt shell e execute esse arquivo. Teve o mesmo retorno de quando executamos o código direto na linha de comando? Sim? Ótimo, vamos continuar.&lt;/p&gt;

&lt;h3 id=&quot;read--ifs&quot;&gt;read &amp;amp; $IFS&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$IFS&lt;/code&gt; é uma variável especial em Bash. &lt;strong&gt;Internal Field Separator&lt;/strong&gt; (IFS) é usada para separar expressões, ou linhas, dentro do comando &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;. Seu valor padrão é composto pelos caracteres de &lt;strong&gt;espaço&lt;/strong&gt;, &lt;strong&gt;tabulação&lt;/strong&gt;, e &lt;strong&gt;nova linha&lt;/strong&gt;, mas pode ser alterado quando necessário.&lt;/p&gt;

&lt;p&gt;Como vimos, a saída do comando &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt; mostra os caminhos separados por dois pontos (&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;), portanto, vamos usar o &lt;code class=&quot;highlighter-rouge&quot;&gt;$IFS&lt;/code&gt; para mostrar que setar nosso caractere de separação:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A atribuição de valores não deve conter espaços&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# entre o identificador da variável e o valor atribuído.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Agora vamos usar o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; para fazer a leitura da variável &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, quebrando seu conteúdo em todos os caracteres &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;. Acrescente o seguinte comando:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# O parâmetro `-a` atribui o conteúdo lido a índices&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sequenciais da variável `caminhos`, iniciando em zero&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# `&amp;lt;&amp;lt;&amp;lt;` é uma maneira de direcionar entrada, que falarei em um post posterior&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -a caminhos &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, temos um array de caminhos dos programas registrados pelo sistema. Como temos que iterar em um loop, já que vamos ler cada um dos valores do array, conheça a estrutura de repetição &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;, em Bash:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# O índice `@` pega todos os valores de `caminhos`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;caminho &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;caminhos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$caminho&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Salve o script e teste. O retorno deve ser cada um dos caminhos do &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, um em cada linha. Como temos o &lt;em&gt;path&lt;/em&gt; de onde estão os programas, vamos trocar o &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; por &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, para que sejam exibidos todos os programas que estejam nesses diretórios. O código final (sem os comentários) ficará assim:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -a caminhos &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;caminho &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;caminhos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;ls &lt;span class=&quot;nv&quot;&gt;$caminho&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Este artigo foi para dar uma pequena introdução no assunto. Pretendo escrever mais coisas sobre Shell Script (lembrando que estou escrevendo os exemplos para o interpretador Bash), aí iremos explorar mais recursos e comandos básicos. Espero te ajudar de alguma forma.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal, até a próxima.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;referências&quot;&gt;Referências&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tiswww.case.edu/php/chet/bash/bash-intro.html&quot;&gt;http://tiswww.case.edu/php/chet/bash/bash-intro.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_shell&quot;&gt;https://en.wikipedia.org/wiki/Unix_shell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bash.cyberciti.biz/guide/Main_Page&quot;&gt;https://bash.cyberciti.biz/guide/Main_Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 -0200</pubDate>
        <link>http://gabrielprates.com/2017/01/08/shell-script-01-introducao.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2017/01/08/shell-script-01-introducao.html</guid>
        
        
      </item>
    
      <item>
        <title>Yes! I am back!!</title>
        <description>&lt;p&gt;&lt;em&gt;Rapaiz,&lt;/em&gt; pense num final de ano apertado! Seminários e provas na faculdade, algumas mudanças no trabalho, muita coisa pra fazer e pouco tempo pra isso tudo. Talvez você já passou por isso, se não, é uma questão de tempo &lt;del&gt;rsrs&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;Foi um período de correria, mas também de grande aprendizado. Descobri o &lt;a href=&quot;https://mpdf.github.io/&quot;&gt;mPDF&lt;/a&gt; (uma &lt;em&gt;lib&lt;/em&gt; para gerar PDF com HTML e PHP), tive que aprender &lt;a href=&quot;https://pt.wikipedia.org/wiki/Shell_script&quot;&gt;Shell Script&lt;/a&gt;, fiz um quiz em &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; pra um trabalho da faculdade, consegui um tempinho pra estudar mais de &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;, precisei me virar um pouco com &lt;a href=&quot;https://www.docker.com/what-docker&quot;&gt;Docker&lt;/a&gt;, tirei um fim de semana pra instalar o &lt;a href=&quot;&quot;&gt;Arch Linux&lt;/a&gt; (deu trabalho, mas a recompensa… &amp;lt;3) e descobri a Engenharia de Software pelo livro de Ian Sommerville (confesso que estou apaixonado por essa parte).&lt;/p&gt;

&lt;p&gt;Agora estou aqui, depois de tudo isso, dando um alô e deixando claro que ainda estou no jogo &lt;strong&gt;;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Um amigo me cobrou posts e eu não esqueci do blog! Na verdade, nessas últimas semanas eu comecei escrever alguns rascunhos e agora terei o tempo que precisava pra terminá-los e contar mais dessas experiências que falei.&lt;/p&gt;

&lt;p&gt;Esse post foi mais como uma nota de esclarecimento e um sinal de vida, no mais, é isso &lt;strong&gt;(:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 00:00:00 -0200</pubDate>
        <link>http://gabrielprates.com/2016/12/17/yes-i-am-back.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2016/12/17/yes-i-am-back.html</guid>
        
        
      </item>
    
      <item>
        <title>WAT JS - Mergulhando nos Comportamentos do JavaScript</title>
        <description>&lt;p&gt;No post &lt;a href=&quot;http://gabrielprates.com/2016/07/12/conversao-de-tipos-em-js.html&quot;&gt;Conversão de tipos em JavaScript&lt;/a&gt;, que fiz há algum tempo, expliquei um pouco de como o motor do JS trata algumas conversões internamente, e recebi um desafio para explicar algumas &lt;em&gt;bizarrices&lt;/em&gt; da linguagem, que você pode ver no vídeo abaixo.&lt;/p&gt;

&lt;video class=&quot;full-width&quot; poster=&quot;https://www.destroyallsoftware.com/images/posters/talks/wat.poster.png&quot; preload=&quot;none&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20161002%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20161002T054907Z&amp;amp;X-Amz-Expires=14400&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=30a2b4f269fd19e5da7f2c86ebdd237ebc3fbe15129576be7b02ea648d4579b7&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Fonte: &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;https://www.destroyallsoftware.com/talks/wat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ah, se você ainda não leu o post que falei, &lt;a href=&quot;http://gabrielprates.com/2016/07/12/conversao-de-tipos-em-js.html&quot;&gt;clique aqui pra ler&lt;/a&gt;, ajudará a entender algumas partes deste post. &lt;strong&gt;;)&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;esclarecimento&quot;&gt;Esclarecimento&lt;/h3&gt;

&lt;p&gt;Gostaria de fazer uma observação aqui. Em um dos últimos parágrafos do post, eu disse que a operação &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; entre &lt;strong&gt;objetos&lt;/strong&gt; compara se eles (os objetos) são iguais. Na verdade, esta operação avalia se o &lt;strong&gt;objeto&lt;/strong&gt; é o mesmo. &lt;strong&gt;&lt;em&gt;Como assim?&lt;/em&gt;&lt;/strong&gt; Devemos saber que quando atribuímos um objeto à uma variável, estamos criando uma nova instância daquele objeto. Veja bem:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Nesse caso os objetos realmente são iguais.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Mas a operação de comparação retorna `false`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Porque são duas instâncias diferentes&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Entretanto, se fizermos o seguinte:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Podemos comparar os objetos e teremos `true`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Já que é a mesma instância.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo == bar&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; porque é a mesma instância do objeto, como se fosse um ponteiro. Nesse caso, podemos fazer até a atribuição de outras propriedades ou métodos, assim:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// E ambos os objetos terão o mesmo conteúdo&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { lang: 'js', baz: 94, fn: [Function] }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { lang: 'js', baz: 94, fn: [Function] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, tudo certo. Podemos prosseguir.&lt;/p&gt;

&lt;h2 id=&quot;operadores-aditivos&quot;&gt;Operadores Aditivos&lt;/h2&gt;

&lt;p&gt;Para explicar os &lt;em&gt;WAT JS&lt;/em&gt;, precisamos entender um pouco do funcionamento dos operadores aditivos, já que eles que causam o &lt;em&gt;“problema”&lt;/em&gt;. Então, vou tentar explicar um pouco do que eles (&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/strong&gt;) fazem aqui.&lt;/p&gt;

&lt;h3 id=&quot;o-operador-de-adição-&quot;&gt;O Operador de Adição (+)&lt;/h3&gt;

&lt;p&gt;Segundo a &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-addition-operator-plus&quot;&gt;seção 12.7.3 da especificação do ES6&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O operador de adição executa concatenação de strings, ou adição numérica.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mas como ele sabe qual ação deve realizar?&lt;/em&gt;&lt;/strong&gt; Simples: antes de trabalhar com os dados, o algoritmo da adição pega os valores primitivos dos termos e trabalha em cima desses valores. Considere a operação &lt;code class=&quot;highlighter-rouge&quot;&gt;a + b&lt;/code&gt; para o algoritmo abaixo (não é uma linguagem de programação específica):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lval: recebe o valor de ToPrimitive(a)
rval: recebe o valor de ToPrimitive(b)

se (lval = String) OR (rval = String):
  lstr: recebe o valor de ToString(lval)
  rstr: recebe o valor de ToString(rval)
  Retorna a String concatenada de lstr e rstr

se não:
  lnum: recebe o valor de ToNumber(lval)
  rnum: recebe o valor de ToNumber(rval)
  Retorna Operacao( lnum + rnum )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Esse é o algoritmo da adição de forma simplificada. Aqui podemos ver que se o primeiro &lt;strong&gt;OU&lt;/strong&gt; o segundo termo for uma &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, a operação realizada será &lt;strong&gt;concatenação&lt;/strong&gt; e todos os valores serão forçados para o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;; caso contrário, será &lt;strong&gt;soma&lt;/strong&gt;, e todos os valores serão forçados para o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;, como nos exemplos a seguir:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'Java'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;JavaScript&quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'JavaScript '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;JavaScript 6&quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' JavaScript'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;6 JavaScript&quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Beleza, estamos indo bem, no entanto, as operações do vídeo são feitas com objetos mais complexos: &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;. Vamos fazer o seguinte, assim que eu terminar de explicar a questão dos operadores, eu volto nesse assunto, OK?&lt;/p&gt;

&lt;h3 id=&quot;o-operador-de-subtração--&quot;&gt;O Operador de Subtração (-)&lt;/h3&gt;

&lt;p&gt;Segundo a &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-subtraction-operator-minus&quot;&gt;seção 12.7.4 da especificação do ES6&lt;/a&gt;, o operador de subtração (&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;) não tem muitos poderes como o de adição (&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;), ele apenas subtrai os valores &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber()&lt;/code&gt; dos termos. &lt;br /&gt;Considere &lt;code class=&quot;highlighter-rouge&quot;&gt;a - b&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lnum: recebe o valor de ToNumber(a)
rnum: recebe o valor de ToNumber(b)
Retorna Operacao( lnum - rnum )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;regras-da-operação&quot;&gt;Regras da Operação&lt;/h3&gt;

&lt;p&gt;A função &lt;code class=&quot;highlighter-rouge&quot;&gt;Operacao()&lt;/code&gt;, invocada nos retornos das operações aditivas, seguirá algumas regras e as mais peculiares são:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;se (um dos termos = NaN):
  Retorna NaN

se (ambos os termos = Infinity, mas de sinais opostos):
  Retorna NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Quando um termo é &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-terms-and-definitions-nan&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;&lt;/a&gt;, significa que o resutado de &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber()&lt;/code&gt; de um dos termos não teve uma conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt; normal, então, era um elemento do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; que não tinha um tipo primitivo definido.&lt;/p&gt;

&lt;p&gt;As demais condições seguem a matemática que aprendemos mesmo:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Infinity&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# -Infinity&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# 4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# -4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# 0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# 10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto. Agora vamos mudar um pouco de assunto.&lt;/p&gt;

&lt;h2 id=&quot;arrays-e-objects-toprimitive&quot;&gt;Arrays e Objects ToPrimitive()&lt;/h2&gt;

&lt;p&gt;Como vimos, a operação de adição verifica o tipo primitivo do valor para decidir o que fazer. Nossa grande questão é:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Qual o tipo primitivo de um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; ou de um &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Antes de mais nada, um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; é um objeto, certo? Certo!&lt;/p&gt;

&lt;p&gt;Os objetos de &lt;em&gt;normais&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;), que vimos &lt;a href=&quot;http://gabrielprates.com/2016/07/12/conversao-de-tipos-em-js.html&quot;&gt;no outro post&lt;/a&gt;, apenas pegam o valor primitivo do objeto. Já os objetos complexos, quando devem ter uma conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt;, buscam um método &lt;em&gt;default&lt;/em&gt; para a conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No caso do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, temos o que podemos chamar de &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.tostring&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.toString&lt;/code&gt;&lt;/a&gt;, que basicamente retorna a &lt;em&gt;string&lt;/em&gt; do &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt;. Observe:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// O `join()` de um Array vazio&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// sempre será uma string vazia&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// []&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Se o Array tiver elementos,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// teremos uma string bacana.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &quot;1,2,3,4,5&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;1,2,3,4,5&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Poderíamos modificar o &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt; ou o &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; caso necessário.&lt;/p&gt;

&lt;p&gt;Já um objeto do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, tem um &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.prototype.tostring&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype.toString&lt;/code&gt;&lt;/a&gt; um pouco diferente. Nesse caso, o algoritmo verifica o tipo do objeto e retorna o resultado da concatenação do seguinte: &lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'[object ' + objectType + ']'&lt;/code&gt;, gerando o resultado &lt;code class=&quot;highlighter-rouge&quot;&gt;'[object Object]'&lt;/code&gt; na maioria dos casos. Observe o exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// '[object Object]'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Até mesmo para objetos&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// que não estejam vazios&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// '[object Object]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enfim, agora que deu pra entender como as coisas funcionam, podemos começar a desmistificar a matemática maluca do WAT JS.&lt;/p&gt;

&lt;h2 id=&quot;wat-js&quot;&gt;WAT JS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[] + []&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;[] + {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao avaliar a primeira operação, lembre-se que ao converter um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; para seu tipo primitivo, teremos uma &lt;em&gt;string&lt;/em&gt; do &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt; do seu conteúdo. Já que ambos estão vazios, teremos duas &lt;em&gt;strings&lt;/em&gt; vazias, e como os termos da “soma” são strings, o operados &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; irá concatenar as duas &lt;em&gt;strings&lt;/em&gt; vazias. Daí nosso retorno &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Já na segunda, a única diferença é que uma das &lt;em&gt;strings&lt;/em&gt; que são concatenadas, vem do &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; de um &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, o que nos leva ao resultado &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object]&quot;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de prosseguir, aconselho a leitura &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS/blob/portuguese-translation/scope%20%26%20closures/ch1.md#entendendo-escopo&quot;&gt;deste capítulo&lt;/a&gt;, para entender um pouco mais sobre escopo.&lt;/p&gt;

&lt;p&gt;Vamos analisar a primeira operação. Bom, primeiro entenda que o &lt;em&gt;motor&lt;/em&gt; fará uma análise léxica da esquerda para a direita (isso para todas essas operações, na verdade), e ao examinar o &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;, ele não o reconhece como um objeto vazio, mas sim como um &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block&quot;&gt;bloco vazio&lt;/a&gt;. Ao tratar o &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, como &lt;em&gt;não há outro termo na operação&lt;/em&gt; (devido ao bloco vazio ser desconsiderado), o &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-unary-plus-operator&quot;&gt;operador unário&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; converterá a &lt;em&gt;string&lt;/em&gt; vazia (valor primitivo do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; vazio) em um tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;, e &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;&quot;)&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora a segunda. No caso desse vídeo, temos a mesma explicação de “bloco vazio” e “operador unário” da operação anterior, mas na parte do operador unário temos &lt;code class=&quot;highlighter-rouge&quot;&gt;+{}&lt;/code&gt;. Aqui há conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt; de &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;, que resulta em &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object]&quot;&lt;/code&gt;. Por fim, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;[object Object]&quot;)&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, que é o resultado obtido no vídeo.&lt;/p&gt;

&lt;p&gt;O resultado do vídeo é o resultado que tenho rodando no console do Firefox 49. Já o Chrome/Chromium +50 e o Node.js 4.5 (V8), que foram meus ambientes de teste, retornam a &lt;em&gt;string&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object][object Object]&quot;&lt;/code&gt;, &lt;del&gt;mas eu ainda estou tendando descobrir o motivo&lt;/del&gt; e eu acho que posso explicar o motivo nos testes abaixo.&lt;/p&gt;

&lt;p&gt;No &lt;strong&gt;Node.js 4.5&lt;/strong&gt; ou no &lt;strong&gt;Chrome/Chromium 53&lt;/strong&gt; (os ambientes que eu testei), tenho os seguintes resultados:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;({}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{} + {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'({} + {})'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Já no &lt;strong&gt;Firefox 49&lt;/strong&gt; tenho o seguinte:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;({}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{} + {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'({} + {})'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Como vimos, o resultado de &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; é &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; pelo fato do primeiro &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; ser considerado um bloco vazio ao invés de um objeto, o que resulta em &lt;code class=&quot;highlighter-rouge&quot;&gt;+{}&lt;/code&gt; ser &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;. No outro caso, como temos a operação entre parênteses, ambos os &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; são considerados objetos, o que justifica &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object][object Object]&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O que não faz sentido, é &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; retornar a string no Chrome/Chromium e no Node.js, quando está fora do &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;&lt;/a&gt;. Se você tentar rodar &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;foo:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bar:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; nesses ambientes, eles retornam um objeto mesmo, já no Firefox, ele tenta executar esse código como um bloco, mas dá erro de sintaxe.&lt;/p&gt;

&lt;p&gt;A conclusão que cheguei foi que o &lt;a href=&quot;https://github.com/v8/v8&quot;&gt;&lt;strong&gt;V8&lt;/strong&gt;&lt;/a&gt; deve permitir esses objetos &lt;em&gt;no contexto do console&lt;/em&gt; (ou seja, não deve ser resultado de algum comportamento peculiar da linguagem), uma vez que um arquivo &lt;strong&gt;block.js&lt;/strong&gt; com o conteúdo &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;foo:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bar:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;, dá o erro esperado quando executado com &lt;code class=&quot;highlighter-rouge&quot;&gt;node block.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;e-o-batman&quot;&gt;E o Batman?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Bom, segundo o que já vimos aqui, o que acontece quando se tem um fator do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; numa subtração JS? &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;! O operador &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; não é tão poderoso, faz apenas subtrações, então não pode fazer nada com algo que não é um número. OK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new Array(16)&lt;/code&gt; nos retorna um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; com 16 posições do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. Então se executarmos um &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt;, teremos 16 vírgulas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new Array(16).join(&quot;wat&quot; - 1)&lt;/code&gt; nos retorna 16 &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;s em sequência, agora é só concatenar um &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; Batman&quot;&lt;/code&gt; nesse retorno e bater palmas &lt;del&gt;haha&lt;/del&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;JavaScript não é uma linguagem bizarra, apenas incompreendida.&lt;/p&gt;

&lt;p&gt;Espero ter sido claro, mas se não fui, ou se restou alguma dúvida, deixe nos comentários, será um prazer falar sobre JavaScript.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal, até a próxima.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;referências&quot;&gt;Referências&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9032856/what-is-the-explanation-for-these-bizarre-javascript-behaviours-mentioned-in-the&quot;&gt;http://stackoverflow.com/questions/9032856/what-is-the-explanation-for-these-bizarre-javascript-behaviours-mentioned-in-the&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;http://www.ecma-international.org/ecma-262/6.0/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 05 Oct 2016 00:00:00 -0300</pubDate>
        <link>http://gabrielprates.com/2016/10/05/wat-js.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2016/10/05/wat-js.html</guid>
        
        
      </item>
    
      <item>
        <title>DuckDuckGo: Uma (ótima) opção busca!</title>
        <description>&lt;p&gt;Pelo lema de privacidade e resultados otimizados, ser open-source e ter uma grande comunidade, o DuckDuckGo tem a marca de mais de 10 milhões de buscas por dia.&lt;/p&gt;

&lt;h2 id=&quot;um-pouco-de-contexto&quot;&gt;Um pouco de contexto&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;DuckDuckGo começou como uma ideia para uma melhor experiência de busca com mais respostas instantâneas e menos spam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa foi a ideia do meu chará, &lt;a href=&quot;https://twitter.com/yegg&quot;&gt;Gabriel Weinberg&lt;/a&gt;, para a criação do DuckDuckGo, em Fevereiro de 2008. Não muito depois da ideia, o buscador &lt;del&gt;(DDG para os íntimos)&lt;/del&gt; foi publicado na rede no dia 25 de Setembro do mesmo ano, tendo sido anunciado no Hacker News e nas comunidades do Reddit.&lt;/p&gt;

&lt;p&gt;Em Janeiro de 2009, eles decidiram fazer uma jogada ousada e não recolher, nem compartilhar nenhuma das nossas informações pessoais. Eles deixam bem claro que “&lt;em&gt;o que você está procurando, é assunto seu, e nós pretendemos manter isso assim.&lt;/em&gt;”. Daí o lema “&lt;em&gt;We don’t track you.&lt;/em&gt;” (Não rastreamos você.), e alguns movimentos, como o &lt;a href=&quot;http://dontbubble.us/&quot;&gt;&lt;em&gt;Filter Bubble&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;isso-é-bom-ou-ruim&quot;&gt;&lt;em&gt;Isso é bom ou ruim?!&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Bom, depende. Nesse ponto podemos ter “problemas” para as agências publicitárias, uma vez que as campanhas de anúncios não funcionariam. Por outro lado, satisfazemos a vontade de milhões de usuários de manter sua privacidade. Claro que existem pessoas que gostam de ver os anúncios do Google Adsense ou do YouTube, mas também existem as que não gostam &lt;del&gt;rsrsrs&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;A ideia deste post não é apontar &lt;strong&gt;certo&lt;/strong&gt; ou &lt;strong&gt;errado&lt;/strong&gt;, mas sim apresentar uma nova possibilidade, então vamos seguir.&lt;/p&gt;

&lt;h2 id=&quot;comunidade&quot;&gt;Comunidade&lt;/h2&gt;

&lt;p&gt;Vários exemplos nos mostram que a participação da comunidade faz a diferença em um projeto. O DDG também prova isso. Em Julho de 2010, foi criada a &lt;a href=&quot;https://duck.co&quot;&gt;DuckDuckGo Community&lt;/a&gt;, onde os usuários poderiam fazer do DDG o mecanismo de busca do povo. Viva o &lt;em&gt;open-source&lt;/em&gt;!!!&lt;/p&gt;

&lt;p&gt;A ideia de que o mecanismo de busca é mais que servidores e algoritmos, mostra que os usuários podem apresentar propostas de melhoria e reportar problemas. Então, em Maio de 2012, entrou em cena uma das melhores coisas do DDG (na minha opinião): as &lt;strong&gt;Respostas Instantâneas&lt;/strong&gt; (ou como eu gosto de chamar &lt;strong&gt;hacks do DuckDuckGo&lt;/strong&gt;), falaremos mais na próxima seção.&lt;/p&gt;

&lt;p&gt;Aqui deixo o convite para você ajudar esse mecanismo de busca, pode ser dando ideias de novas funcionalidades, novas respostas instantâneas (&lt;strong&gt;&lt;em&gt;^^,&lt;/em&gt;&lt;/strong&gt; quem sabe até implementando elas), com traduções, uma proposta de design bacana, ou simplesmente, compartilhando a experiência com seus amigos! &lt;strong&gt;XD&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;respostas-instantâneas&quot;&gt;Respostas Instantâneas&lt;/h2&gt;

&lt;p&gt;Chegamos ao ponto mais interessante e útil, a parte que me faz amar o DuckDuckGo, os Hacks!!!&lt;/p&gt;

&lt;p&gt;Experimente a seguinte busca:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=!yt+braziljs+2016&quot;&gt;!yt braziljs 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;pera-aí-a-busca-foi-no-youtube&quot;&gt;&lt;em&gt;Pera aí… a busca foi no YouTube?&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Hmm… também. Você acabou de passar pela experiência do &lt;a href=&quot;https://duckduckgo.com/bang&quot;&gt;&lt;strong&gt;!bang&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ideia é que você possa fazer uma busca direta em um site específico, diretamente pela busca do DDG.&lt;/p&gt;

&lt;p&gt;Experimente essa aqui, buscar a série de livros &lt;em&gt;You Don’t Know JS&lt;/em&gt; na Amazon:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=!a+You+Don%27t+Know+JS&quot;&gt;!a You Don’t Know JS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;De quebra, tá aqui a tradução dessa série: &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS&quot;&gt;&lt;strong&gt;cezaraugusto/You-Dont-Know-JS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existe uma lista enooooorme de &lt;strong&gt;!bang&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;!g&lt;/em&gt;&lt;/strong&gt; para buscar no Google &lt;em&gt;hehe&lt;/em&gt;), e você pode encontrar vários exemplos aqui: &lt;a href=&quot;https://duckduckgo.com/bang#bangs-list&quot;&gt;8,615 bangs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seguindo!!&lt;/p&gt;

&lt;p&gt;Digamos que você está no Rio de Janeiro e acabou de acordar. Ainda não levantou da cama e quer saber como está o tempo hoje. Simples, é só abrir o DuckDuckGo no seu navegador, ou pelo &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.duckduckgo.mobile.android&amp;amp;hl=pt_BR&quot;&gt;app&lt;/a&gt;, e buscar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=Rio+de+Janeiro+weather&amp;amp;ia=weather&quot;&gt;&lt;strong&gt;Rio de Janeiro weather&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pronto! Previsão do tempo de hoje até daqui 7 dias para você se planejar.&lt;/p&gt;

&lt;p&gt;Outra situação, você teve vontade de saber quanto está a cotação Bitcoin. Novamente, é só perguntar ao DDG! Faça a seguinte busca:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=16+USD+to+EUR&amp;amp;ia=currency&quot;&gt;&lt;strong&gt;1 BTC to BRL&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pros designers: você está no telefone, sem um &lt;em&gt;color picker&lt;/em&gt; e teve a ideia de uma cor bacana para um layout. Vai lá no DDG e pesquisa o seguinte:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=color+picker&amp;amp;ia=colorpicker&quot;&gt;&lt;strong&gt;colorpicker&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Problema resolvido (:&lt;/p&gt;

&lt;p&gt;Ou então, por algum motivo na vida, você precisa de &lt;a href=&quot;https://duckduckgo.com/?q=512+words+of+lorem+ipsum&quot;&gt;&lt;strong&gt;512 words of lorem ipsum&lt;/strong&gt;&lt;/a&gt;. O DuckDuckGo tem todas elas pra você.&lt;/p&gt;

&lt;p&gt;Sabe aquelas carinhas legais feitas com caracteres, por exemplo: &lt;code class=&quot;highlighter-rouge&quot;&gt;¯\_(ツ)_/¯&lt;/code&gt;? Pois é, o DDG tem uma listinha com as mais bacanas: &lt;a href=&quot;https://duckduckgo.com/?q=shruggie+and+friends&quot;&gt;&lt;strong&gt;shruggie and friends&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Outro exemplo, se você é um desenvolvedor e está querendo aprender a trabalhar com JavaScript no Vim, aqui tem duas buscas que podem te ajudar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=vim+cheat+sheet&quot;&gt;&lt;strong&gt;vim cheat sheet&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=javascript+syntax&quot;&gt;&lt;strong&gt;javascript syntax&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deu pra entender como isso é bom? Facilita o dia-a-dia. Eu poderia ficar dando exemplos, mas prefiro deixar que você explore as possibilidades.&lt;/p&gt;

&lt;p&gt;Aqui está: &lt;a href=&quot;https://duck.co/ia&quot;&gt;&lt;strong&gt;duck.co/ia&lt;/strong&gt;&lt;/a&gt;, centenas de possibilidades de respostas instantâneas!&lt;/p&gt;

&lt;p&gt;Dê uma olhada lá e me diga qual foi mais útil pra você.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Estou aproveitando esse desbravamento no DDG pra criar uma lista com os hacks que acho mais legais. Gostaria da sua ajuda, então aqui está o link para a &lt;a href=&quot;https://github.com/gabsprates/awesome-ddg&quot;&gt;&lt;strong&gt;Awesome DDG&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dê sugestões de hacks interessantes que você achou e também de como essa lista poderia ser melhor, mais acessível e mais organizada &lt;del&gt;rsrsrs&lt;/del&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Enfim, aconselho você a dar uma olhada na página do &lt;a href=&quot;https://duckduckgo.com/tour&quot;&gt;&lt;strong&gt;Welcome to DuckDuckGo!&lt;/strong&gt;&lt;/a&gt; e no &lt;a href=&quot;https://duckduckgo.com/about&quot;&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/a&gt;. Faça buscas no DDG, teste a capacidade dele, depois me conte sua experiência.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal, até a próxima.&lt;/p&gt;

&lt;p&gt;(:&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Sep 2016 00:00:00 -0300</pubDate>
        <link>http://gabrielprates.com/2016/09/15/duckduckgo-uma-opcao-busca.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2016/09/15/duckduckgo-uma-opcao-busca.html</guid>
        
        
      </item>
    
      <item>
        <title>Que não vai padronizar, o quê?!</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Baaam!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adotar padrões pode parecer chato no início, mas é a melhor opção para manter o código legível e fácil de manter. Talvez, não exista nada pior que um código mal formatado, com identações malucas (com tabulações e espaços juntas), funções com nomes escritos de forma aleatória e sem sentido, e vários outros problemas que dificultam a leitura, não somente de terceiros, mas do próprio autor do código depois de uma semana.&lt;/p&gt;

&lt;p&gt;Pensando nisso, foram desenvolvidos os guias de estilo de código. Geralmente, as comunidades de linguagens desenvolveram seus padrões, até mesmo para facilitar a vida dos desenvolvedores, e até mesmo na construção de frameworks. A ideia desse post é apresentar alguns dos padrões que conheço, então se você conhece algum outro, deixe nos comentários.&lt;/p&gt;

&lt;p&gt;Ah, antes de continuar, é bom lembrar que algumas empresas tem seus próprios &lt;em&gt;Style Guides&lt;/em&gt;, então é sempre bom passar saber se na sua tem algum. #FicaADica&lt;/p&gt;

&lt;p&gt;Por padrão, vamos por ordem alfabética. (:&lt;/p&gt;

&lt;h2 id=&quot;c&quot;&gt;C&lt;/h2&gt;
&lt;p&gt;Um dia, em uma aula de Estrutura de Dados, fiquei curioso pra saber se existia algum guia para a &lt;a href=&quot;https://pt.wikipedia.org/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)&quot;&gt;linguagem C&lt;/a&gt; e fiquei contente em encontrar pelo menos 2. São eles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/dev/styleguide.html&quot;&gt;Apache Developers' C Language Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/dts/pm/Papers/nasa-c-style.pdf&quot;&gt;NASA - C Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não encontrei uma fonte oficial do guia da NASA, mas mesmo assim vale a pena dar uma olhada, é um material bacana.&lt;/p&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pt.wikipedia.org/wiki/Cascading_Style_Sheets&quot;&gt;CSS&lt;/a&gt; é sem dúvidas umas das coisas mais legais pra mim. Por ser fácil de começar brincar com CSS, a chance de se encontrar um código bagunçado é muito alta. Existem alguns guias para ajudar a deixar seu código mais estiloso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/htmlcssguide.xml&quot;&gt;Google HTML/CSS Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://contribute.jquery.org/style-guide/css/&quot;&gt;jQuery - CSS Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://primercss.io/&quot;&gt;Primer - GitHub CSS Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://make.wordpress.org/core/handbook/best-practices/coding-standards/css/&quot;&gt;WordPress CSS Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alguns deles falam sobre HTML também, por isso não vou colocar uma seção específica pra HTML aqui.&lt;/p&gt;

&lt;p&gt;Existem algumas técnicas muito legais também. Talvez você já tenha ouvido falar em SMACSS, BEM, OOCSS, e por aí vai. Recomendo o post do &lt;a href=&quot;https://twitter.com/jcemer&quot;&gt;Jean Carlo Emer&lt;/a&gt;: &lt;a href=&quot;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&quot;&gt;OOCSS, SMACSS, BEM, DRY CSS: afinal, como escrever CSS?&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;Por ser a linguagem que está dominando o mundo, o &lt;a href=&quot;https://pt.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; tem vários &lt;em&gt;Style Guides&lt;/em&gt;, e quando digo ‘vários’, é porque tem muitos mesmo. Vou citar os mais comuns pra mim:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml&quot;&gt;Google JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://contribute.jquery.org/style-guide/js/&quot;&gt;jQuery - JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/misc/coding-style&quot;&gt;npm-coding-style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preciso fazer um gancho pra um projeto sobre JS. Se você não sabe JS, ou acha que não sabe, dê uma lida na &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS&quot;&gt;série de livros &lt;em&gt;You Don't Know JS&lt;/em&gt;&lt;/a&gt;. Caso você já saiba ou se sente seguro sobre grande parte da linguagem, nos ajude a terminar essas traduções (:&lt;/p&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP&lt;/h2&gt;
&lt;p&gt;Com certeza, &lt;a href=&quot;https://pt.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt; é uma das linguagens com uma das comunidades mais ativa, e particularmente, uma das minhas linguagens preferidas. Aqui estão alguns guias bacanas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeigniter.com/user_guide/general/styleguide.html&quot;&gt;CodeIgniter - PHP Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2: Coding Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/&quot;&gt;WordPress - PHP Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existe o &lt;a href=&quot;http://www.php-fig.org/&quot;&gt;PHP-FIG (PHP Framework Interoperability Group)&lt;/a&gt;, que cuida das PSRs (PHP Standard Recommendation), padrões gerais para se trabalhar com PHP. É um trabalho muito interessante e eu recomendo que você dê uma olhada em todas as PSRs.&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;
&lt;p&gt;Não tenho muito para falar de &lt;a href=&quot;https://pt.wikipedia.org/wiki/Python&quot;&gt;Python&lt;/a&gt; por não conhecer muito, mas sei que existe o tal da &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8 – Style Guide for Python Code&lt;/a&gt;, que é um guia de estilo da própria linguagem. Acho que já uma boa referência.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;
&lt;p&gt;Comecei estudar a &lt;a href=&quot;https://pt.wikipedia.org/wiki/Ruby_(linguagem_de_programa%C3%A7%C3%A3o)&quot;&gt;linguagem Ruby&lt;/a&gt; há algum tempo e achei muito bonita. Estou seguindo o &lt;em&gt;style guide&lt;/em&gt; do GitHub, mas encontrei outro aqui também, então aqui estão os links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/styleguide/ruby&quot;&gt;GitHub - Ruby Styleguide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ruby-hacking-style-guide.github.io/&quot;&gt;Ruby Hacking Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Alguns desses guias se divergem, outros são bem parecidos, mas isso é bom, dá pra pegar o melhor de cada um.&lt;/p&gt;

&lt;p&gt;Não falei de algum que você gosta, ou deixei de falar de alguma linguagem que você conhece e sabe que tem um &lt;em&gt;style guide&lt;/em&gt; bacana? Deixe nos comentários, será um prazer aprender contigo!&lt;/p&gt;

&lt;p&gt;Espero ter ajudado (:&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 00:00:00 -0300</pubDate>
        <link>http://gabrielprates.com/2016/08/07/que-nao-vai-padronizar-o-que.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2016/08/07/que-nao-vai-padronizar-o-que.html</guid>
        
        
      </item>
    
      <item>
        <title>Conversão de tipos em JavaScript</title>
        <description>&lt;p&gt;Um dia desses eu recebi um quebra-gelo no Telegram, com o seguinte:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// true né?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;De cara eu pensei que seria &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, mas fiz questão de rodar no console e ver no que dava. Claro que deu &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Mesmo assim, quis entender o motivo de &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt; retornar &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; e fui procurar na &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-type-conversion&quot;&gt;documentação&lt;/a&gt; do ECMAScript 6, ou ECMAScript 2015.&lt;/p&gt;

&lt;p&gt;O JavaScript, ou ECMAScript, tem um conjunto de operações abastratas que ocorrem por baixo dos panos. Dentre estas operações, temos as conversões de tipos (&lt;em&gt;Types Conversions&lt;/em&gt;), que é executada sempre que necessário - que é justamente o caso do &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Existem várias operações abstratas de conversão de tipos em JS, mas vou abordar apenas as mais comuns.&lt;/p&gt;

&lt;h3 id=&quot;toprimitive&quot;&gt;ToPrimitive&lt;/h3&gt;

&lt;p&gt;Praticamente tudo em JS é tratado como um objeto, então a conversão &lt;em&gt;ToPrimitive&lt;/em&gt; transforma o &lt;em&gt;input&lt;/em&gt; para o seu devido tipo primitivo, isto é, retorna o valor sem ser um objeto. Talvez seja um pouco óbvio e muito comum, mas é interessante ver no console. Primeiro vejamos os tipos primitivos:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Tipos primitivos&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 'foo'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Agora, já que temos objetos pra quase tudo em JS, veja o retorno ao rodar no console do Chromium/Chrome:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Tratando como objetos&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// String {0: &quot;f&quot;, 1: &quot;o&quot;, 2: &quot;o&quot;, length: 3, [[PrimitiveValue]]: &quot;foo&quot;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Number {[[PrimitiveValue]]: 2016}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Boolean {[[PrimitiveValue]]: false}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Veja que os objetos sempre guardam o valor primitivo, que é retornado por baixo dos panos quando precisamos utilizar o valor para alguma outra operação, como por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2017&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'foo bar'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Para converter valores do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, é feita uma análise de qual o valor primitivo do objeto, por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// `Object(2010)` retorna o valor primitivo do objeto `Number`,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nesse caso, 2010&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `Object('foo')` retorna o valor primitivo do objeto `String`,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nesse caso, 'foo'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 'foo bar'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `Object(true)` retorna o valor primitivo do objeto `Boolean`,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nesse caso, true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tonumber&quot;&gt;ToNumber&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToNumber&lt;/em&gt; transforma a entrada em um tipo numérico, e é aqui que entramos naquele exemplo do &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A conversão para valores numéricos funciona basicamente com as seguintes regras:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Estas regras estão definidas no ECMAScript&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// +0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// +0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Então, por regra, é por isso que Number(null) retorna 0, e isso não siginifica que &lt;code class=&quot;highlighter-rouge&quot;&gt;null == 0&lt;/code&gt;, já que são valores primitivos diferentes.&lt;/p&gt;

&lt;p&gt;Mas e quanto a conversão de &lt;em&gt;string&lt;/em&gt; para &lt;em&gt;number&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;2016&quot;)&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Para fazer a conversão de uma string, o &lt;em&gt;ToNumber&lt;/em&gt; tenta interpretar a string na codificação &lt;strong&gt;UTF-16&lt;/strong&gt; e caso não consiga, retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, assim:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;20.16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 20.16&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// -0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;+Infinity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// +Infinity&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;++Infinity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;201 6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Para objetos, o retorno é correspondente ao&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// valor primitivo do tipo do objeto&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 21&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;toboolean&quot;&gt;ToBoolean&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToBoolean&lt;/em&gt; transforma a entrada em um tipo booleano, que assim como o &lt;em&gt;ToNumber&lt;/em&gt;, segue algumas regras. Vamos lá:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Qualquer outro valor numérico retorna true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// String retorna `false` se estiver vazia,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// caso contrário, retorna `true`&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tostring&quot;&gt;ToString&lt;/h3&gt;

&lt;p&gt;A operações abstratas &lt;em&gt;ToString&lt;/em&gt; tem a função de transformar a entrada em uma &lt;em&gt;string&lt;/em&gt;, e assim como as outras operações aqui descritas, também segue as suas regras de conversão, que são:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// &quot;null&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// &quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// &quot;false&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Para objetos, o retorno é correspondente ao&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// valor primitivo do tipo do objeto&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// '2016'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// '21'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'true'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'true'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// '[object Object]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Para converter um &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; para &lt;em&gt;string&lt;/em&gt;, há uma série de considerações a se fazer, vou citar algumas. Tomando como base &lt;code class=&quot;highlighter-rouge&quot;&gt;String(Number(m))&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. Se m for NaN:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;NaN&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. Se m for +0 ou −0:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. Se m for menor que 0 (zero):&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;-2016&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4. Se m for +Infinity:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Infinity&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 5. Para números muito grandes, muito pequenos,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ou que tem alguma forma particular para serem&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// representados como Number:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2345678987654321123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	 &lt;span class=&quot;c1&quot;&gt;// 2.3456789876543211e+21&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2345678987654321123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;2.3456789876543211e+21&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;toobject&quot;&gt;ToObject&lt;/h3&gt;
&lt;p&gt;Por último, temos a &lt;em&gt;ToObject&lt;/em&gt;, que transforma a entrada em um objeto, quando possível. Até aqui já tivemos a oportinudade de perceber esse tipo de conversão, já que alguns dos exemplos mostraram como &lt;em&gt;ToObject&lt;/em&gt; funciona. O que acontece basicamente é que &lt;em&gt;ToObject&lt;/em&gt; avalia o tipo primitivo da entrada e retorna um novo objeto daquele tipo, com o valor da entrada. Veja bem:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Number {[[PrimitiveValue]]: 2016}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// String {0: &quot;f&quot;, 1: &quot;o&quot;, 2: &quot;o&quot;, length: 3, [[PrimitiveValue]]: &quot;foo&quot;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Boolean {[[PrimitiveValue]]: true}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enfim, achei a resposta para o &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt; retornar &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; e deu pra aprender um bocado. Recomendo que você dê uma olhada na &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;documentação do ECMAScript&lt;/a&gt;, existem várias outras operações abstratas interessantes.&lt;/p&gt;

&lt;p&gt;Como curiosidade, olha só e tente adivinhar qual o resultado do último:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// new Boolean(true)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ??&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;O próprio &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean(true)&lt;/code&gt; retorna o valor primitivo &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, que faz com que o objeto gerado em &lt;code class=&quot;highlighter-rouge&quot;&gt;Object(true)&lt;/code&gt; sofra uma conversão para o valor primitivo e assim fazer a igualdade. Já &lt;code class=&quot;highlighter-rouge&quot;&gt;new Boolean(true)&lt;/code&gt; retorna um novo objeto, que na comparação &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Isso porque ao comparar dois objetos em JS, a comparação é para saber se os dois objetos são iguais. Faça o teste: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bom… é isso. Espero que eu tenha sido claro, mas se você ficou com dúvidas, me mande um tweet, vamos trocar ideia (:&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 00:00:00 -0300</pubDate>
        <link>http://gabrielprates.com/2016/07/12/conversao-de-tipos-em-js.html</link>
        <guid isPermaLink="true">http://gabrielprates.com/2016/07/12/conversao-de-tipos-em-js.html</guid>
        
        
      </item>
    
  </channel>
</rss>
