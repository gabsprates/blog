<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabriel Prates</title>
    <description>Desenvolvedor há mais de 5 anos e baterista nas horas vagas. #web #html #css #js #freesoftware #opensource #busquemconhecimento
</description>
    <link>http://blog.gabsprates.com/</link>
    <atom:link href="http://blog.gabsprates.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 15 Oct 2016 00:16:42 -0300</pubDate>
    <lastBuildDate>Sat, 15 Oct 2016 00:16:42 -0300</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>WAT JS - Mergulhando nos Comportamentos do JavaScript</title>
        <description>&lt;p&gt;No post &lt;a href=&quot;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&quot;&gt;Conversão de tipos em JavaScript&lt;/a&gt;, que fiz há algum tempo, expliquei um pouco de como o motor do JS trata algumas conversões internamente, e recebi um desafio para explicar algumas &lt;em&gt;bizarrices&lt;/em&gt; da linguagem, que você pode ver no vídeo abaixo.&lt;/p&gt;

&lt;video class=&quot;full-width&quot; poster=&quot;https://www.destroyallsoftware.com/images/posters/talks/wat.poster.png&quot; preload=&quot;none&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20161002%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20161002T054907Z&amp;amp;X-Amz-Expires=14400&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=30a2b4f269fd19e5da7f2c86ebdd237ebc3fbe15129576be7b02ea648d4579b7&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Fonte: &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;https://www.destroyallsoftware.com/talks/wat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ah, se você ainda não leu o post que falei, &lt;a href=&quot;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&quot;&gt;clique aqui pra ler&lt;/a&gt;, ajudará a entender algumas partes deste post. &lt;strong&gt;;)&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;esclarecimento&quot;&gt;Esclarecimento&lt;/h3&gt;

&lt;p&gt;Gostaria de fazer uma observação aqui. Em um dos últimos parágrafos do post, eu disse que a operação &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; entre &lt;strong&gt;objetos&lt;/strong&gt; compara se eles (os objetos) são iguais. Na verdade, esta operação avalia se o &lt;strong&gt;objeto&lt;/strong&gt; é o mesmo. &lt;strong&gt;&lt;em&gt;Como assim?&lt;/em&gt;&lt;/strong&gt; Devemos saber que quando atribuímos um objeto à uma variável, estamos criando uma nova instância daquele objeto. Veja bem:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Nesse caso os objetos realmente são iguais.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Mas a operação de comparação retorna `false`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Porque são duas instâncias diferentes&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Entretanto, se fizermos o seguinte:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Podemos comparar os objetos e teremos `true`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Já que é a mesma instância.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo == bar&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; porque é a mesma instância do objeto, como se fosse um ponteiro. Nesse caso, podemos fazer até a atribuição de outras propriedades ou métodos, assim:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// E ambos os objetos terão o mesmo conteúdo&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { lang: 'js', baz: 94, fn: [Function] }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { lang: 'js', baz: 94, fn: [Function] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, tudo certo. Podemos prosseguir.&lt;/p&gt;

&lt;h2 id=&quot;operadores-aditivos&quot;&gt;Operadores Aditivos&lt;/h2&gt;

&lt;p&gt;Para explicar os &lt;em&gt;WAT JS&lt;/em&gt;, precisamos entender um pouco do funcionamento dos operadores aditivos, já que eles que causam o &lt;em&gt;“problema”&lt;/em&gt;. Então, vou tentar explicar um pouco do que eles (&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/strong&gt;) fazem aqui.&lt;/p&gt;

&lt;h3 id=&quot;o-operador-de-adio-&quot;&gt;O Operador de Adição (+)&lt;/h3&gt;

&lt;p&gt;Segundo a &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-addition-operator-plus&quot;&gt;seção 12.7.3 da especificação do ES6&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O operador de adição executa concatenação de strings, ou adição numérica.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mas como ele sabe qual ação deve realizar?&lt;/em&gt;&lt;/strong&gt; Simples: antes de trabalhar com os dados, o algoritmo da adição pega os valores primitivos dos termos e trabalha em cima desses valores. Considere a operação &lt;code class=&quot;highlighter-rouge&quot;&gt;a + b&lt;/code&gt; para o algoritmo abaixo (não é uma linguagem de programação específica):&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToPrimitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToPrimitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Retorna&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concatenada&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lstr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rstr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Retorna&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Operacao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Esse é o algoritmo da adição de forma simplificada. Aqui podemos ver que se o primeiro &lt;strong&gt;OU&lt;/strong&gt; o segundo termo for uma &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, a operação realizada será &lt;strong&gt;concatenação&lt;/strong&gt; e todos os valores serão forçados para o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;; caso contrário, será &lt;strong&gt;soma&lt;/strong&gt;, e todos os valores serão forçados para o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;, como nos exemplos a seguir:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'Java'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;JavaScript&quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'JavaScript '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;JavaScript 6&quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' JavaScript'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;6 JavaScript&quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Beleza, estamos indo bem, no entanto, as operações do vídeo são feitas com objetos mais complexos: &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;. Vamos fazer o seguinte, assim que eu terminar de explicar a questão dos operadores, eu volto nesse assunto, OK?&lt;/p&gt;

&lt;h3 id=&quot;o-operador-de-subtrao--&quot;&gt;O Operador de Subtração (-)&lt;/h3&gt;

&lt;p&gt;Segundo a &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-subtraction-operator-minus&quot;&gt;seção 12.7.4 da especificação do ES6&lt;/a&gt;, o operador de subtração (&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;) não tem muitos poderes como o de adição (&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;), ele apenas subtrai os valores &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber()&lt;/code&gt; dos termos. Considere &lt;code class=&quot;highlighter-rouge&quot;&gt;a - b&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ToNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Retorna&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Operacao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;regras-da-operao&quot;&gt;Regras da Operação&lt;/h3&gt;

&lt;p&gt;A função &lt;code class=&quot;highlighter-rouge&quot;&gt;Operacao()&lt;/code&gt;, invocada nos retornos das operações aditivas, seguirá algumas regras e as mais peculiares são:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;um&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Retorna&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NaN&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ambos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinais&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opostos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Retorna&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Quando um termo é &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, significa que o resutado de &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber()&lt;/code&gt; de um dos termos não teve uma conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt; normal, então, era um elemento do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; que não tinha um tipo primitivo definido.&lt;/p&gt;

&lt;p&gt;As demais condições seguem a matemática que aprendemos mesmo:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Infinity&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# -Infinity&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# 4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# -4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# 0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# 10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto. Agora vamos mudar um pouco de assunto.&lt;/p&gt;

&lt;h2 id=&quot;arrays-e-objects-toprimitive&quot;&gt;Arrays e Objects ToPrimitive()&lt;/h2&gt;

&lt;p&gt;Como vimos, a operação de adição verifica o tipo primitivo do valor para decidir o que fazer. Nossa grande questão é:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Qual o tipo primitivo de um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; ou de um &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Antes de mais nada, um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; é um objeto, certo? Certo!&lt;/p&gt;

&lt;p&gt;Os objetos de &lt;em&gt;normais&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;), que vimos &lt;a href=&quot;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&quot;&gt;no outro post&lt;/a&gt;, apenas pegam o valor primitivo do objeto. Já os objetos complexos, quando devem ter uma conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt;, buscam um método &lt;em&gt;default&lt;/em&gt; para a conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No caso do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, temos o que podemos chamar de &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.tostring&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.toString&lt;/code&gt;&lt;/a&gt;, que basicamente retorna a &lt;em&gt;string&lt;/em&gt; do &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt;. Observe:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// O `join()` de um Array vazio&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// sempre será uma string vazia&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// []&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Se o Array tiver elementos,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// teremos uma string bacana.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &quot;1,2,3,4,5&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;1,2,3,4,5&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Poderíamos modificar o &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt; ou o &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; caso necessário.&lt;/p&gt;

&lt;p&gt;Já um objeto do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, tem um &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.prototype.tostring&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype.toString&lt;/code&gt;&lt;/a&gt; um pouco diferente. Nesse caso, o algoritmo verifica o tipo do objeto e retorna o resultado da concatenação do seguinte: &lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'[object ' + objectType + ']'&lt;/code&gt;, gerando o resultado &lt;code class=&quot;highlighter-rouge&quot;&gt;'[object Object]'&lt;/code&gt; na maioria dos casos. Observe o exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// '[object Object]'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Até mesmo para objetos&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// que não estejam vazios&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// '[object Object]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enfim, agora que deu pra entender como as coisas funcionam, podemos começar a desmistificar a matemática maluca do WAT JS.&lt;/p&gt;

&lt;h2 id=&quot;wat-js&quot;&gt;WAT JS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[] + []&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;[] + {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao avaliar a primeira operação, lembre-se que ao converter um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; para seu tipo primitivo, teremos uma &lt;em&gt;string&lt;/em&gt; do &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt; do seu conteúdo. Já que ambos estão vazios, teremos duas &lt;em&gt;strings&lt;/em&gt; vazias, e como os termos da “soma” são strings, o operados &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; irá concatenar as duas &lt;em&gt;strings&lt;/em&gt; vazias. Daí nosso retorno &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Já na segunda, a única diferença é que uma das &lt;em&gt;strings&lt;/em&gt; que são concatenadas, vem do &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; de um &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, o que nos leva ao resultado &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object]&quot;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de prosseguir, aconselho a leitura &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS/blob/portuguese-translation/scope%20%26%20closures/ch1.md#entendendo-escopo&quot;&gt;deste capítulo&lt;/a&gt;, para entender um pouco mais sobre escopo.&lt;/p&gt;

&lt;p&gt;Vamos analisar a primeira operação. Bom, primeiro entenda que o &lt;em&gt;motor&lt;/em&gt; fará uma análise léxica da esquerda para a direita (isso para todas essas operações, na verdade), e ao examinar o &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;, ele não o reconhece como um objeto vazio, mas sim como um &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block&quot;&gt;bloco vazio&lt;/a&gt;. Ao tratar o &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, como &lt;em&gt;não há outro termo na operação&lt;/em&gt; (devido ao bloco vazio ser desconsiderado), o &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-unary-plus-operator&quot;&gt;operador unário&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; converterá a &lt;em&gt;string&lt;/em&gt; vazia (valor primitivo do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; vazio) em um tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;, e &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;&quot;)&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora a segunda. No caso desse vídeo, temos a mesma explicação de “bloco vazio” e “operador unário” da operação anterior, mas na parte do operador unário temos &lt;code class=&quot;highlighter-rouge&quot;&gt;+{}&lt;/code&gt;. Aqui há conversão &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt; de &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;, que resulta em &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object]&quot;&lt;/code&gt;. Por fim, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;[object Object]&quot;)&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, que é o resultado obtido no vídeo.&lt;/p&gt;

&lt;p&gt;O resultado do vídeo é o resultado que tenho rodando no console do Firefox 49. Já o Chrome/Chromium +50 e o Node.js 4.5 (V8), que foram meus ambientes de teste, retornam a &lt;em&gt;string&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object][object Object]&quot;&lt;/code&gt;, &lt;del&gt;mas eu ainda estou tendando descobrir o motivo&lt;/del&gt; e eu acho que posso explicar o motivo nos testes abaixo.&lt;/p&gt;

&lt;p&gt;No &lt;strong&gt;Node.js 4.5&lt;/strong&gt; ou no &lt;strong&gt;Chrome/Chromium 53&lt;/strong&gt; (os ambientes que eu testei), tenho os seguintes resultados:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;({}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{} + {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'({} + {})'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Já no &lt;strong&gt;Firefox 49&lt;/strong&gt; tenho o seguinte:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;({}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{} + {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'({} + {})'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object Object][object Object]&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Como vimos, o resultado de &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; é &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; pelo fato do primeiro &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; ser considerado um bloco vazio ao invés de um objeto, o que resulta em &lt;code class=&quot;highlighter-rouge&quot;&gt;+{}&lt;/code&gt; ser &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;. No outro caso, como temos a operação entre parênteses, ambos os &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; são considerados objetos, o que justifica &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;[object Object][object Object]&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O que não faz sentido, é &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; retornar a string no Chrome/Chromium e no Node.js, quando está fora do &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;&lt;/a&gt;. Se você tentar rodar &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;foo:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bar:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; nesses ambientes, eles retornam um objeto mesmo, já no Firefox, ele tenta executar esse código como um bloco, mas dá erro de sintaxe.&lt;/p&gt;

&lt;p&gt;A conclusão que cheguei foi que o &lt;a href=&quot;https://github.com/v8/v8&quot;&gt;&lt;strong&gt;V8&lt;/strong&gt;&lt;/a&gt; deve permitir esses objetos &lt;em&gt;no contexto do console&lt;/em&gt; (ou seja, não deve ser resultado de algum comportamento peculiar da linguagem), uma vez que um arquivo &lt;strong&gt;block.js&lt;/strong&gt; com o conteúdo &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;foo:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bar:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;, dá o erro esperado quando executado com &lt;code class=&quot;highlighter-rouge&quot;&gt;node block.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;e-o-batman&quot;&gt;E o Batman?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Bom, segundo o que já vimos aqui, o que acontece quando se tem um fator do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; numa subtração JS? &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;! O operador &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; não é tão poderoso, faz apenas subtrações, então não pode fazer nada com algo que não é um número. OK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new Array(16)&lt;/code&gt; nos retorna um &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; com 16 posições do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. Então se executarmos um &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt;, teremos 16 vírgulas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;new Array(16).join(&quot;wat&quot; - 1)&lt;/code&gt; nos retorna 16 &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;s em sequência, agora é só concatenar um &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; Batman&quot;&lt;/code&gt; nesse retorno e bater palmas &lt;del&gt;haha&lt;/del&gt;.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;JavaScript não é uma linguagem bizarra, apenas incompreendida.&lt;/p&gt;

&lt;p&gt;Espero ter sido claro, mas se não fui, ou se restou alguma dúvida, deixe nos comentários, será um prazer falar sobre JavaScript.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal, até a próxima.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;referncias&quot;&gt;Referências&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9032856/what-is-the-explanation-for-these-bizarre-javascript-behaviours-mentioned-in-the&quot;&gt;http://stackoverflow.com/questions/9032856/what-is-the-explanation-for-these-bizarre-javascript-behaviours-mentioned-in-the&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;http://www.ecma-international.org/ecma-262/6.0/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 05 Oct 2016 00:00:00 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/10/05/wat-js.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/10/05/wat-js.html</guid>
        
        
      </item>
    
      <item>
        <title>DuckDuckGo: Uma (ótima) opção busca!</title>
        <description>&lt;p&gt;Pelo lema de privacidade e resultados otimizados, ser open-source e ter uma grande comunidade, o DuckDuckGo tem a marca de mais de 10 milhões de buscas por dia.&lt;/p&gt;

&lt;h2 id=&quot;um-pouco-de-contexto&quot;&gt;Um pouco de contexto&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;DuckDuckGo começou como uma ideia para uma melhor experiência de busca com mais respostas instantâneas e menos spam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa foi a ideia do meu chará, &lt;a href=&quot;https://twitter.com/yegg&quot;&gt;Gabriel Weinberg&lt;/a&gt;, para a criação do DuckDuckGo, em Fevereiro de 2008. Não muito depois da ideia, o buscador &lt;del&gt;(DDG para os íntimos)&lt;/del&gt; foi publicado na rede no dia 25 de Setembro do mesmo ano, tendo sido anunciado no Hacker News e nas comunidades do Reddit.&lt;/p&gt;

&lt;p&gt;Em Janeiro de 2009, eles decidiram fazer uma jogada ousada e não recolher, nem compartilhar nenhuma das nossas informações pessoais. Eles deixam bem claro que “&lt;em&gt;o que você está procurando, é assunto seu, e nós pretendemos manter isso assim.&lt;/em&gt;”. Daí o lema “&lt;em&gt;We don’t track you.&lt;/em&gt;” (Não rastreamos você.), e alguns movimentos, como o &lt;a href=&quot;http://dontbubble.us/&quot;&gt;&lt;em&gt;Filter Bubble&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;isso--bom-ou-ruim&quot;&gt;&lt;em&gt;Isso é bom ou ruim?!&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Bom, depende. Nesse ponto podemos ter “problemas” para as agências publicitárias, uma vez que as campanhas de anúncios não funcionariam. Por outro lado, satisfazemos a vontade de milhões de usuários de manter sua privacidade. Claro que existem pessoas que gostam de ver os anúncios do Google Adsense ou do YouTube, mas também existem as que não gostam &lt;del&gt;rsrsrs&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;A ideia deste post não é apontar &lt;strong&gt;certo&lt;/strong&gt; ou &lt;strong&gt;errado&lt;/strong&gt;, mas sim apresentar uma nova possibilidade, então vamos seguir.&lt;/p&gt;

&lt;h2 id=&quot;comunidade&quot;&gt;Comunidade&lt;/h2&gt;

&lt;p&gt;Vários exemplos nos mostram que a participação da comunidade faz a diferença em um projeto. O DDG também prova isso. Em Julho de 2010, foi criada a &lt;a href=&quot;https://duck.co&quot;&gt;DuckDuckGo Community&lt;/a&gt;, onde os usuários poderiam fazer do DDG o mecanismo de busca do povo. Viva o &lt;em&gt;open-source&lt;/em&gt;!!!&lt;/p&gt;

&lt;p&gt;A ideia de que o mecanismo de busca é mais que servidores e algoritmos, mostra que os usuários podem apresentar propostas de melhoria e reportar problemas. Então, em Maio de 2012, entrou em cena uma das melhores coisas do DDG (na minha opinião): as &lt;strong&gt;Respostas Instantâneas&lt;/strong&gt; (ou como eu gosto de chamar &lt;strong&gt;hacks do DuckDuckGo&lt;/strong&gt;), falaremos mais na próxima seção.&lt;/p&gt;

&lt;p&gt;Aqui deixo o convite para você ajudar esse mecanismo de busca, pode ser dando ideias de novas funcionalidades, novas respostas instantâneas (&lt;strong&gt;&lt;em&gt;^^,&lt;/em&gt;&lt;/strong&gt; quem sabe até implementando elas), com traduções, uma proposta de design bacana, ou simplesmente, compartilhando a experiência com seus amigos! &lt;strong&gt;XD&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;respostas-instantneas&quot;&gt;Respostas Instantâneas&lt;/h2&gt;

&lt;p&gt;Chegamos ao ponto mais interessante e útil, a parte que me faz amar o DuckDuckGo, os Hacks!!!&lt;/p&gt;

&lt;p&gt;Experimente a seguinte busca:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=!yt+braziljs+2016&quot;&gt;!yt braziljs 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;pera-a-a-busca-foi-no-youtube&quot;&gt;&lt;em&gt;Pera aí… a busca foi no YouTube?&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Hmm… também. Você acabou de passar pela experiência do &lt;a href=&quot;https://duckduckgo.com/bang&quot;&gt;&lt;strong&gt;!bang&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ideia é que você possa fazer uma busca direta em um site específico, diretamente pela busca do DDG.&lt;/p&gt;

&lt;p&gt;Experimente essa aqui, buscar a série de livros &lt;em&gt;You Don’t Know JS&lt;/em&gt; na Amazon:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=!a+You+Don%27t+Know+JS&quot;&gt;!a You Don’t Know JS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;De quebra, tá aqui a tradução dessa série: &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS&quot;&gt;&lt;strong&gt;cezaraugusto/You-Dont-Know-JS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existe uma lista enooooorme de &lt;strong&gt;!bang&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;!g&lt;/em&gt;&lt;/strong&gt; para buscar no Google &lt;em&gt;hehe&lt;/em&gt;), e você pode encontrar vários exemplos aqui: &lt;a href=&quot;https://duckduckgo.com/bang#bangs-list&quot;&gt;8,615 bangs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seguindo!!&lt;/p&gt;

&lt;p&gt;Digamos que você está no Rio de Janeiro e acabou de acordar. Ainda não levantou da cama e quer saber como está o tempo hoje. Simples, é só abrir o DuckDuckGo no seu navegador, ou pelo &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.duckduckgo.mobile.android&amp;amp;hl=pt_BR&quot;&gt;app&lt;/a&gt;, e buscar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=Rio+de+Janeiro+weather&amp;amp;ia=weather&quot;&gt;&lt;strong&gt;Rio de Janeiro weather&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pronto! Previsão do tempo de hoje até daqui 7 dias para você se planejar.&lt;/p&gt;

&lt;p&gt;Outra situação, você teve vontade de saber quanto está a cotação Bitcoin. Novamente, é só perguntar ao DDG! Faça a seguinte busca:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=16+USD+to+EUR&amp;amp;ia=currency&quot;&gt;&lt;strong&gt;1 BTC to BRL&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pros designers: você está no telefone, sem um &lt;em&gt;color picker&lt;/em&gt; e teve a ideia de uma cor bacana para um layout. Vai lá no DDG e pesquisa o seguinte:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=color+picker&amp;amp;ia=colorpicker&quot;&gt;&lt;strong&gt;colorpicker&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Problema resolvido (:&lt;/p&gt;

&lt;p&gt;Ou então, por algum motivo na vida, você precisa de &lt;a href=&quot;https://duckduckgo.com/?q=512+words+of+lorem+ipsum&quot;&gt;&lt;strong&gt;512 words of lorem ipsum&lt;/strong&gt;&lt;/a&gt;. O DuckDuckGo tem todas elas pra você.&lt;/p&gt;

&lt;p&gt;Sabe aquelas carinhas legais feitas com caracteres, por exemplo: &lt;code class=&quot;highlighter-rouge&quot;&gt;¯\_(ツ)_/¯&lt;/code&gt;? Pois é, o DDG tem uma listinha com as mais bacanas: &lt;a href=&quot;https://duckduckgo.com/?q=shruggie+and+friends&quot;&gt;&lt;strong&gt;shruggie and friends&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Outro exemplo, se você é um desenvolvedor e está querendo aprender a trabalhar com JavaScript no Vim, aqui tem duas buscas que podem te ajudar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=vim+cheat+sheet&quot;&gt;&lt;strong&gt;vim cheat sheet&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com/?q=javascript+syntax&quot;&gt;&lt;strong&gt;javascript syntax&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deu pra entender como isso é bom? Facilita o dia-a-dia. Eu poderia ficar dando exemplos, mas prefiro deixar que você explore as possibilidades.&lt;/p&gt;

&lt;p&gt;Aqui está: &lt;a href=&quot;https://duck.co/ia&quot;&gt;&lt;strong&gt;duck.co/ia&lt;/strong&gt;&lt;/a&gt;, centenas de possibilidades de respostas instantâneas!&lt;/p&gt;

&lt;p&gt;Dê uma olhada lá e me diga qual foi mais útil pra você.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Estou aproveitando esse desbravamento no DDG pra criar uma lista com os hacks que acho mais legais. Gostaria da sua ajuda, então aqui está o link para a &lt;a href=&quot;https://github.com/gabsprates/awesome-ddg&quot;&gt;&lt;strong&gt;Awesome DDG&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dê sugestões de hacks interessantes que você achou e também de como essa lista poderia ser melhor, mais acessível e mais organizada &lt;del&gt;rsrsrs&lt;/del&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Enfim, aconselho você a dar uma olhada na página do &lt;a href=&quot;https://duckduckgo.com/tour&quot;&gt;&lt;strong&gt;Welcome to DuckDuckGo!&lt;/strong&gt;&lt;/a&gt; e no &lt;a href=&quot;https://duckduckgo.com/about&quot;&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/a&gt;. Faça buscas no DDG, teste a capacidade dele, depois me conte sua experiência.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal, até a próxima.&lt;/p&gt;

&lt;p&gt;(:&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Sep 2016 00:00:00 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/09/15/duckduckgo-uma-opcao-busca.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/09/15/duckduckgo-uma-opcao-busca.html</guid>
        
        
      </item>
    
      <item>
        <title>Que não vai padronizar, o quê?!</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Baaam!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adotar padrões pode parecer chato no início, mas é a melhor opção para manter o código legível e fácil de manter. Talvez, não exista nada pior que um código mal formatado, com identações malucas (com tabulações e espaços juntas), funções com nomes escritos de forma aleatória e sem sentido, e vários outros problemas que dificultam a leitura, não somente de terceiros, mas do próprio autor do código depois de uma semana.&lt;/p&gt;

&lt;p&gt;Pensando nisso, foram desenvolvidos os guias de estilo de código. Geralmente, as comunidades de linguagens desenvolveram seus padrões, até mesmo para facilitar a vida dos desenvolvedores, e até mesmo na construção de frameworks. A ideia desse post é apresentar alguns dos padrões que conheço, então se você conhece algum outro, deixe nos comentários.&lt;/p&gt;

&lt;p&gt;Ah, antes de continuar, é bom lembrar que algumas empresas tem seus próprios &lt;em&gt;Style Guides&lt;/em&gt;, então é sempre bom passar saber se na sua tem algum. #FicaADica&lt;/p&gt;

&lt;p&gt;Por padrão, vamos por ordem alfabética. (:&lt;/p&gt;

&lt;h2 id=&quot;c&quot;&gt;C&lt;/h2&gt;
&lt;p&gt;Um dia, em uma aula de Estrutura de Dados, fiquei curioso pra saber se existia algum guia para a &lt;a href=&quot;https://pt.wikipedia.org/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)&quot;&gt;linguagem C&lt;/a&gt; e fiquei contente em encontrar pelo menos 2. São eles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/dev/styleguide.html&quot;&gt;Apache Developers' C Language Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/dts/pm/Papers/nasa-c-style.pdf&quot;&gt;NASA - C Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não encontrei uma fonte oficial do guia da NASA, mas mesmo assim vale a pena dar uma olhada, é um material bacana.&lt;/p&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pt.wikipedia.org/wiki/Cascading_Style_Sheets&quot;&gt;CSS&lt;/a&gt; é sem dúvidas umas das coisas mais legais pra mim. Por ser fácil de começar brincar com CSS, a chance de se encontrar um código bagunçado é muito alta. Existem alguns guias para ajudar a deixar seu código mais estiloso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/htmlcssguide.xml&quot;&gt;Google HTML/CSS Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://contribute.jquery.org/style-guide/css/&quot;&gt;jQuery - CSS Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://primercss.io/&quot;&gt;Primer - GitHub CSS Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://make.wordpress.org/core/handbook/best-practices/coding-standards/css/&quot;&gt;WordPress CSS Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alguns deles falam sobre HTML também, por isso não vou colocar uma seção específica pra HTML aqui.&lt;/p&gt;

&lt;p&gt;Existem algumas técnicas muito legais também. Talvez você já tenha ouvido falar em SMACSS, BEM, OOCSS, e por aí vai. Recomendo o post do &lt;a href=&quot;https://twitter.com/jcemer&quot;&gt;Jean Carlo Emer&lt;/a&gt;: &lt;a href=&quot;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&quot;&gt;OOCSS, SMACSS, BEM, DRY CSS: afinal, como escrever CSS?&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;Por ser a linguagem que está dominando o mundo, o &lt;a href=&quot;https://pt.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; tem vários &lt;em&gt;Style Guides&lt;/em&gt;, e quando digo ‘vários’, é porque tem muitos mesmo. Vou citar os mais comuns pra mim:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml&quot;&gt;Google JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://contribute.jquery.org/style-guide/js/&quot;&gt;jQuery - JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/misc/coding-style&quot;&gt;npm-coding-style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preciso fazer um gancho pra um projeto sobre JS. Se você não sabe JS, ou acha que não sabe, dê uma lida na &lt;a href=&quot;https://github.com/cezaraugusto/You-Dont-Know-JS&quot;&gt;série de livros &lt;em&gt;You Don't Know JS&lt;/em&gt;&lt;/a&gt;. Caso você já saiba ou se sente seguro sobre grande parte da linguagem, nos ajude a terminar essas traduções (:&lt;/p&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP&lt;/h2&gt;
&lt;p&gt;Com certeza, &lt;a href=&quot;https://pt.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt; é uma das linguagens com uma das comunidades mais ativa, e particularmente, uma das minhas linguagens preferidas. Aqui estão alguns guias bacanas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeigniter.com/user_guide/general/styleguide.html&quot;&gt;CodeIgniter - PHP Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.php-fig.org/psr/psr-2/&quot;&gt;PSR-2: Coding Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/&quot;&gt;WordPress - PHP Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existe o &lt;a href=&quot;http://www.php-fig.org/&quot;&gt;PHP-FIG (PHP Framework Interoperability Group)&lt;/a&gt;, que cuida das PSRs (PHP Standard Recommendation), padrões gerais para se trabalhar com PHP. É um trabalho muito interessante e eu recomendo que você dê uma olhada em todas as PSRs.&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;
&lt;p&gt;Não tenho muito para falar de &lt;a href=&quot;https://pt.wikipedia.org/wiki/Python&quot;&gt;Python&lt;/a&gt; por não conhecer muito, mas sei que existe o tal da &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8 – Style Guide for Python Code&lt;/a&gt;, que é um guia de estilo da própria linguagem. Acho que já uma boa referência.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;
&lt;p&gt;Comecei estudar a &lt;a href=&quot;https://pt.wikipedia.org/wiki/Ruby_(linguagem_de_programa%C3%A7%C3%A3o)&quot;&gt;linguagem Ruby&lt;/a&gt; há algum tempo e achei muito bonita. Estou seguindo o &lt;em&gt;style guide&lt;/em&gt; do GitHub, mas encontrei outro aqui também, então aqui estão os links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/styleguide/ruby&quot;&gt;GitHub - Ruby Styleguide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ruby-hacking-style-guide.github.io/&quot;&gt;Ruby Hacking Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Alguns desses guias se divergem, outros são bem parecidos, mas isso é bom, dá pra pegar o melhor de cada um.&lt;/p&gt;

&lt;p&gt;Não falei de algum que você gosta, ou deixei de falar de alguma linguagem que você conhece e sabe que tem um &lt;em&gt;style guide&lt;/em&gt; bacana? Deixe nos comentários, será um prazer aprender contigo!&lt;/p&gt;

&lt;p&gt;Espero ter ajudado (:&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 00:00:00 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/08/07/que-nao-vai-padronizar-o-que.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/08/07/que-nao-vai-padronizar-o-que.html</guid>
        
        
      </item>
    
      <item>
        <title>Conversão de tipos em JavaScript</title>
        <description>&lt;p&gt;Um dia desses eu recebi um quebra-gelo no Telegram, com o seguinte:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// true né?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;De cara eu pensei que seria &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, mas fiz questão de rodar no console e ver no que dava. Claro que deu &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Mesmo assim, quis entender o motivo de &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt; retornar &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; e fui procurar na &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-type-conversion&quot;&gt;documentação&lt;/a&gt; do ECMAScript 6, ou ECMAScript 2015.&lt;/p&gt;

&lt;p&gt;O JavaScript, ou ECMAScript, tem um conjunto de operações abastratas que ocorrem por baixo dos panos. Dentre estas operações, temos as conversões de tipos (&lt;em&gt;Types Conversions&lt;/em&gt;), que é executada sempre que necessário - que é justamente o caso do &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Existem várias operações abstratas de conversão de tipos em JS, mas vou abordar apenas as mais comuns.&lt;/p&gt;

&lt;h3 id=&quot;toprimitive&quot;&gt;ToPrimitive&lt;/h3&gt;

&lt;p&gt;Praticamente tudo em JS é tratado como um objeto, então a conversão &lt;em&gt;ToPrimitive&lt;/em&gt; transforma o &lt;em&gt;input&lt;/em&gt; para o seu devido tipo primitivo, isto é, retorna o valor sem ser um objeto. Talvez seja um pouco óbvio e muito comum, mas é interessante ver no console. Primeiro vejamos os tipos primitivos:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Tipos primitivos&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 'foo'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Agora, já que temos objetos pra quase tudo em JS, veja o retorno ao rodar no console do Chromium/Chrome:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Tratando como objetos&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// String {0: &quot;f&quot;, 1: &quot;o&quot;, 2: &quot;o&quot;, length: 3, [[PrimitiveValue]]: &quot;foo&quot;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Number {[[PrimitiveValue]]: 2016}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Boolean {[[PrimitiveValue]]: false}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Veja que os objetos sempre guardam o valor primitivo, que é retornado por baixo dos panos quando precisamos utilizar o valor para alguma outra operação, como por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2017&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'foo bar'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Para converter valores do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, é feita uma análise de qual o valor primitivo do objeto, por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// `Object(2010)` retorna o valor primitivo do objeto `Number`,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nesse caso, 2010&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `Object('foo')` retorna o valor primitivo do objeto `String`,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nesse caso, 'foo'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 'foo bar'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `Object(true)` retorna o valor primitivo do objeto `Boolean`,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nesse caso, true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tonumber&quot;&gt;ToNumber&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToNumber&lt;/em&gt; transforma a entrada em um tipo numérico, e é aqui que entramos naquele exemplo do &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A conversão para valores numéricos funciona basicamente com as seguintes regras:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Estas regras estão definidas no ECMAScript&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// +0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// +0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Então, por regra, é por isso que Number(null) retorna 0, e isso não siginifica que &lt;code class=&quot;highlighter-rouge&quot;&gt;null == 0&lt;/code&gt;, já que são valores primitivos diferentes.&lt;/p&gt;

&lt;p&gt;Mas e quanto a conversão de &lt;em&gt;string&lt;/em&gt; para &lt;em&gt;number&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;2016&quot;)&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Para fazer a conversão de uma string, o &lt;em&gt;ToNumber&lt;/em&gt; tenta interpretar a string na codificação &lt;strong&gt;UTF-16&lt;/strong&gt; e caso não consiga, retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, assim:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;20.16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 20.16&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// -0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;+Infinity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// +Infinity&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;++Infinity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;201 6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Para objetos, o retorno é correspondente ao&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// valor primitivo do tipo do objeto&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 21&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;toboolean&quot;&gt;ToBoolean&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToBoolean&lt;/em&gt; transforma a entrada em um tipo booleano, que assim como o &lt;em&gt;ToNumber&lt;/em&gt;, segue algumas regras. Vamos lá:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Qualquer outro valor numérico retorna true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// String retorna `false` se estiver vazia,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// caso contrário, retorna `true`&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tostring&quot;&gt;ToString&lt;/h3&gt;

&lt;p&gt;A operações abstratas &lt;em&gt;ToString&lt;/em&gt; tem a função de transformar a entrada em uma &lt;em&gt;string&lt;/em&gt;, e assim como as outras operações aqui descritas, também segue as suas regras de conversão, que são:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// &quot;null&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// &quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// &quot;false&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Para objetos, o retorno é correspondente ao&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// valor primitivo do tipo do objeto&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// '2016'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// '21'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'true'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'true'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// '[object Object]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Para converter um &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; para &lt;em&gt;string&lt;/em&gt;, há uma série de considerações a se fazer, vou citar algumas. Tomando como base &lt;code class=&quot;highlighter-rouge&quot;&gt;String(Number(m))&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. Se m for NaN:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;NaN&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. Se m for +0 ou −0:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. Se m for menor que 0 (zero):&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;-2016&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4. Se m for +Infinity:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Infinity&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 5. Para números muito grandes, muito pequenos,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ou que tem alguma forma particular para serem&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// representados como Number:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2345678987654321123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	 &lt;span class=&quot;c1&quot;&gt;// 2.3456789876543211e+21&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2345678987654321123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;2.3456789876543211e+21&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;toobject&quot;&gt;ToObject&lt;/h3&gt;
&lt;p&gt;Por último, temos a &lt;em&gt;ToObject&lt;/em&gt;, que transforma a entrada em um objeto, quando possível. Até aqui já tivemos a oportinudade de perceber esse tipo de conversão, já que alguns dos exemplos mostraram como &lt;em&gt;ToObject&lt;/em&gt; funciona. O que acontece basicamente é que &lt;em&gt;ToObject&lt;/em&gt; avalia o tipo primitivo da entrada e retorna um novo objeto daquele tipo, com o valor da entrada. Veja bem:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Number {[[PrimitiveValue]]: 2016}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// String {0: &quot;f&quot;, 1: &quot;o&quot;, 2: &quot;o&quot;, length: 3, [[PrimitiveValue]]: &quot;foo&quot;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Boolean {[[PrimitiveValue]]: true}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enfim, achei a resposta para o &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(null)&lt;/code&gt; retornar &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; e deu pra aprender um bocado. Recomendo que você dê uma olhada na &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;documentação do ECMAScript&lt;/a&gt;, existem várias outras operações abstratas interessantes.&lt;/p&gt;

&lt;p&gt;Como curiosidade, olha só e tente adivinhar qual o resultado do último:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// new Boolean(true)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ??&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;O próprio &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean(true)&lt;/code&gt; retorna o valor primitivo &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, que faz com que o objeto gerado em &lt;code class=&quot;highlighter-rouge&quot;&gt;Object(true)&lt;/code&gt; sofra uma conversão para o valor primitivo e assim fazer a igualdade. Já &lt;code class=&quot;highlighter-rouge&quot;&gt;new Boolean(true)&lt;/code&gt; retorna um novo objeto, que na comparação &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Isso porque ao comparar dois objetos em JS, a comparação é para saber se os dois objetos são iguais. Faça o teste: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bom… é isso. Espero que eu tenha sido claro, mas se você ficou com dúvidas, me mande um tweet, vamos trocar ideia (:&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 00:00:00 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html</guid>
        
        
      </item>
    
      <item>
        <title>Bulma: framework CSS baseado em flexbox</title>
        <description>&lt;p&gt;Este artigo foi originalmente postado no &lt;a href=&quot;//tableless.com.br/bulma-framework-css-baseado-em-flexbox/&quot;&gt;Tableless&lt;/a&gt; no dia 28 de junho de 2016.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Inspirado pelo Bootstrap, o Bulma visa oferecer a todos a alegria de fazer o design do site, com a simplicidade do flexbox e a elegância de Sass.” - &lt;a href=&quot;http://jgthms.com/&quot;&gt;Jeremy Thomas&lt;/a&gt;, criador do projeto Bulma.io.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como o título diz, o &lt;a href=&quot;http://bulma.io/&quot;&gt;Bulma&lt;/a&gt; é um framework CSS baseado na tecnologia flexbox, que já tem uma grande &lt;a href=&quot;http://caniuse.com/#search=flexbox&quot;&gt;compatibilidade&lt;/a&gt; entre os navegadores. O pacote contém todos os elementos mais comuns como botões, formulários, menus, tabelas, títulos, notificações, barras de progresso e um simples sistema de grid (basta adicionar uma coluna, o resize das colunas é automático).&lt;/p&gt;

&lt;p&gt;Vou mostrar alguns exemplos para que você possa entender o poder do Bulma.&lt;/p&gt;

&lt;p&gt;Primeiramente, faremos a instalação que não precisa de nada mais que um link para o arquivo de estilos do Bulma:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.0.26/css/bulma.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Claro que você pode baixar e deixar no seu diretório local, e também baixar com o NPM: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install bulma&lt;/code&gt;; mas o que quero mostrar é que tudo que você precisa é apenas de um arquivo de CSS.&lt;/p&gt;

&lt;p&gt;Baixando com o NPM você terá como personalizar facilmente com SASS.&lt;/p&gt;

&lt;p&gt;O Bulma não vem com nenhum pacote de icon-fonts acoplado, então, caso você pretenda usar algum, como o Font Awesome, você deve inserí-lo também.&lt;/p&gt;

&lt;h2 id=&quot;o-grid&quot;&gt;O Grid&lt;/h2&gt;
&lt;p&gt;Lembrando: como o Bulma foi baseado no Bootstrap, uma das semelhanças é o sistema de grid com 12 colunas.&lt;/p&gt;

&lt;p&gt;Como falei, o grid funciona de forma muito simples. Tudo que você precisa é ter uma &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; com a classe &lt;code class=&quot;highlighter-rouge&quot;&gt;.columns&lt;/code&gt; e suas filhas &lt;code class=&quot;highlighter-rouge&quot;&gt;.column&lt;/code&gt;, como no exemplo abaixo:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;columns&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.column&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.column&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.column&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.column&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Você pode entender melhor como funciona com &lt;a href=&quot;http://codepen.io/gabsprates/full/PNVJrP/&quot;&gt;esse exemplo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas e se você quiser que uma coluna ocupe o espaço de duas? Ou três? Ou quatro? Simples!!!&lt;/p&gt;

&lt;p&gt;Podemos utilizar as classes &lt;code class=&quot;highlighter-rouge&quot;&gt;is-2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-5&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-6&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-7&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-9&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is-10&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;is-11&lt;/code&gt; para especificar qual a área ocupada pela &lt;code class=&quot;highlighter-rouge&quot;&gt;.column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para entender melhor, aconselho a dar uma olhada &lt;a href=&quot;http://bulma.io/documentation/grid/columns/&quot;&gt;neste&lt;/a&gt; e &lt;a href=&quot;http://bulma.io/documentation/grid/tiles/&quot;&gt;neste&lt;/a&gt; links.&lt;/p&gt;

&lt;h2 id=&quot;hero&quot;&gt;Hero&lt;/h2&gt;
&lt;p&gt;Você já teve problemas com alinhar elementos verticalmente ao centro? O Bulma é um verdadeiro herói para essas situações! Veja este exemplo:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hero is-large&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hero-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          Título
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          Exemplo do uso do hero
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Aqui o Bulma centraliza os títulos na vertical, qualquer conteúdo seria alinhado também. &lt;a href=&quot;http://bulma.io/documentation/layout/hero/&quot;&gt;Clique aqui&lt;/a&gt; mais exemplos.&lt;/p&gt;

&lt;h2 id=&quot;level&quot;&gt;Level&lt;/h2&gt;
&lt;p&gt;Por último, quero falar um pouco sobre as navbars. Veja esse código:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level-item has-text-centered&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link is-info&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level-item has-text-centered&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link is-info&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Menu&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level-item has-text-centered&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://bulma.io/images/bulma.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height: 33px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level-item has-text-centered&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link is-info&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Reservations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level-item has-text-centered&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link is-info&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ele gera uma navbar em que os elementos são divididos com a largura igual e com alinhamento vertical no centro, mesmo com imagem ou até mesmo um &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt;, ele manteria esse alinhamento.&lt;/p&gt;

&lt;p&gt;Veja mais &lt;a href=&quot;http://bulma.io/documentation/components/level/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;enfim&quot;&gt;Enfim…&lt;/h2&gt;
&lt;p&gt;Estes foram alguns exemplos do poder do Bulma mas há muito mais que você pode conferir na própria &lt;a href=&quot;http://bulma.io/documentation/overview/start/&quot;&gt;documentação do projeto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Existem vários componentes legais, como cards, menus, paginação, mensagens, e várias outras coisas fáceis de usar e simples de compreender.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal (:&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/06/30/bulma-framework-css-baseado-em-flexbox.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/06/30/bulma-framework-css-baseado-em-flexbox.html</guid>
        
        
      </item>
    
      <item>
        <title>Nostalgia e Lakka</title>
        <description>&lt;p&gt;Bom, muita gente conhece a emoção de ficar acordado nas madrugadas das férias jogando Top Gear 2, Donkey Kong 3, Super Mario World e Side Pocket, no Super Nintendo. Outros ficaram mais apegados ao Mega Man Battle Network 6 (Falzar) e Pokemón Ruby, do GameBoy Advance. Como as gerações mais novas não tiveram muito disso, creio que é um boa hora para lhes apresentar o &lt;a href=&quot;http://www.lakka.tv/&quot;&gt;Lakka&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lakka é uma distribuição Linux destinada a transformar um pequeno computador em um console de jogos &lt;em&gt;retro&lt;/em&gt;. É baseado no &lt;a href=&quot;http://openelec.tv/home/what-is-openelec&quot;&gt;OpenELEC&lt;/a&gt; e no &lt;a href=&quot;http://www.libretro.com/index.php/retroarch-2/&quot;&gt;RetroArch&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Claro que podemos baixar um emulador qualquer, até mesmo o próprio RetroArch, e instalá-lo em nosso PC para jogar o que quisermos, mas a proposta do Lakka me chamou muita atenção. Com um suporte à mais de 30 consoles diferentes e por rodar em hardwares com baixo desempenho, vale a pena repensar no destino do seu PC antigo que está parado em algum canto.&lt;/p&gt;

&lt;p&gt;Ganhei um PC velho de uma tia, na verdade ela disse que ia jogar fora porque não servia mais, daí eu intervi. Claro que servia! Contava com a configuração de um Intel Celeron com 2.00GHz, 1GB de RAM e um HD de 80GB. Tava ótimo! Eu pensei em instalar alguma distribuição Linux leve, um Debian, ou Xubuntu, para montar uma espécie de &lt;em&gt;jukebox&lt;/em&gt;, mas aí precisei usar o HD para backup e acabou que ele ficou em outra máquina minha.&lt;/p&gt;

&lt;p&gt;Um tempo depois, vi o &lt;a href=&quot;https://www.youtube.com/watch?v=yRQCIgWUmBQ&quot;&gt;vídeo&lt;/a&gt; do &lt;a href=&quot;http://www.diolinux.com.br/&quot;&gt;Diolinux&lt;/a&gt; sobre o RetroArch e vi que eu poderia usar o PC que ganhei pra isso, mas depois lembrei que não tinha mais o HD, &lt;em&gt;hehe&lt;/em&gt;. Daí eu vi falar do Lakka, como já vinha com o sistema todo completo, eu não precisaria instalar alguma distribuição para instalar o RetroArch depois, mas ainda estava sem HD.&lt;/p&gt;

&lt;p&gt;Passaram-se algumas semanas e um colega me falou que tinha um PC velho que ele ia jogar fora. Claro que eu intervi!!! Acabou que eu só aproveitei o HD de 20GB mesmo, era um Pentium 4 com 512MB de RAM. Ainda tenho ele aqui, pra algum outro possível projeto.&lt;/p&gt;

&lt;p&gt;Juntei as peças e fiz meu console de games &lt;em&gt;retro&lt;/em&gt;. A instalação do Lakka é muito simples, no site oficial tem todos os passos. Por padrão, a instalação é feita por dispositivos USB. Pode ser que você não consiga &lt;em&gt;bootar&lt;/em&gt; o pendrive apenas com o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;, no GNU/Linux, mas é só usar o UNetbootin que dá certo. Para montar o pendrive &lt;em&gt;bootável&lt;/em&gt; a partir do Windows, use o Win32DiskImager, como diz o manual de instalação do Lakka.&lt;/p&gt;

&lt;p&gt;Agora estou aqui jogando e entendendo a história do Mega Man que eu tanto gostava, mas que na 7ª série eu não entendia os diálogos porque eram em inglês &lt;em&gt;hahaha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então, é isso. Se você gostou desse projeto e da ideia, dê uma estrela no &lt;a href=&quot;https://github.com/libretro/Lakka&quot;&gt;GitHub do Lakka&lt;/a&gt; e contribua como puder.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/06/26/nostalgia-e-lakka.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/06/26/nostalgia-e-lakka.html</guid>
        
        
      </item>
    
      <item>
        <title>Então, é isso!</title>
        <description>&lt;p&gt;Demorou um pouco, mas resolvi criar meu blog para falar sobre minhas aventuras com computação, desenvolvimento e com todo o resto que der pra falar hehe.&lt;/p&gt;

&lt;p&gt;Então… é isso (:&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jun 2016 17:54:40 -0300</pubDate>
        <link>http://blog.gabsprates.com/2016/06/12/entao-e-isso.html</link>
        <guid isPermaLink="true">http://blog.gabsprates.com/2016/06/12/entao-e-isso.html</guid>
        
        
      </item>
    
  </channel>
</rss>
